import os
import re
from typing import Dict, List, Tuple, Optional
import cv2
import numpy as np
import pytesseract
import logging
from src.database import Database
import uuid
from src import utils
import torch
import stanza
import requests
from bs4 import BeautifulSoup
import json
from pathlib import Path
from src.medical_terms import MedicalTermsManager

logger = logging.getLogger(__name__)

# Словарь для транслитерации
TRANSLIT_DICT = {
    'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ё': 'e',
    'ж': 'zh', 'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm',
    'н': 'n', 'о': 'o', 'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u',
    'ф': 'f', 'х': 'kh', 'ц': 'ts', 'ч': 'ch', 'ш': 'sh', 'щ': 'sch',
    'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya',
    'А': 'A', 'Б': 'B', 'В': 'V', 'Г': 'G', 'Д': 'D', 'Е': 'E', 'Ё': 'E',
    'Ж': 'Zh', 'З': 'Z', 'И': 'I', 'Й': 'Y', 'К': 'K', 'Л': 'L', 'М': 'M',
    'Н': 'N', 'О': 'O', 'П': 'P', 'Р': 'R', 'С': 'S', 'Т': 'T', 'У': 'U',
    'Ф': 'F', 'Х': 'Kh', 'Ц': 'Ts', 'Ч': 'Ch', 'Ш': 'Sh', 'Щ': 'Sch',
    'Ъ': '', 'Ы': 'Y', 'Ь': '', 'Э': 'E', 'Ю': 'Yu', 'Я': 'Ya'
}

def transliterate(text: str) -> str:
    """
    Транслитерирует русский текст в латиницу
    
    Args:
        text: текст для транслитерации
        
    Returns:
        str: транслитерированный текст
    """
    result = []
    for char in text:
        result.append(TRANSLIT_DICT.get(char, char))
    return ''.join(result)

class DocumentProcessor:
    """Класс для обработки медицинских документов"""

    def __init__(self, db: Optional[Database] = None):
        """
        Инициализация процессора

        Args:
            db: экземпляр базы данных (опционально)
        """
        self.db = db

        # Загрузка базы медицинских терминов
        self.medical_terms = MedicalTermsManager()

        # Инициализация моделей Stanza для определения имен
        logger.info("Загрузка моделей Stanza для определения имен...")
        try:
            # Загружаем английскую модель
            logger.info("Загрузка английской модели Stanza...")
            stanza.download('en')
            self.nlp_en = stanza.Pipeline('en', processors='tokenize,ner')
            logger.info("Английская модель Stanza успешно загружена")
            
            # Загружаем русскую модель
            logger.info("Загрузка русской модели Stanza...")
            stanza.download('ru')
            self.nlp_ru = stanza.Pipeline('ru', processors='tokenize,ner')
            logger.info("Русская модель Stanza успешно загружена")
            
            # Тестируем модели
            test_text_en = "John Smith works at the hospital"
            test_text_ru = "Иванов работает в больнице Петрова"
            
            doc_en = self.nlp_en(test_text_en)
            test_names_en = [ent.text for ent in doc_en.ents if ent.type == "PERSON"]
            logger.info(f"Тест английской модели: найдены имена {test_names_en}")
            
            doc_ru = self.nlp_ru(test_text_ru)
            test_names_ru = [ent.text for ent in doc_ru.ents if ent.type == "PERSON"]
            logger.info(f"Тест русской модели: найдены имена {test_names_ru}")
            
        except Exception as e:
            logger.error(f"Ошибка при загрузке моделей Stanza: {str(e)}")
            logger.exception("Полный стек ошибки:")
            self.nlp_en = None
            self.nlp_ru = None

        # Загрузка базы русских фамилий
        logger.info("Загрузка базы русских фамилий...")
        self.russian_surnames = set()
        self.translit_surnames = set()
        try:
            surnames_path = os.path.join(os.path.dirname(__file__), 'data', 'russian_surnames.txt')
            logger.info(f"Полный путь к файлу фамилий: {os.path.abspath(surnames_path)}")
            
            if os.path.exists(surnames_path):
                logger.info(f"Найден файл с фамилиями: {surnames_path}")
                file_size = os.path.getsize(surnames_path) / (1024 * 1024)  # размер в МБ
                logger.info(f"Размер файла: {file_size:.2f} МБ")
                
                # Пробуем разные кодировки
                encodings = ['utf-8', 'cp1251', 'windows-1251', 'ascii']
                for encoding in encodings:
                    try:
                        logger.info(f"Попытка чтения файла в кодировке {encoding}")
                        with open(surnames_path, 'r', encoding=encoding) as f:
                            # Читаем первые несколько строк для проверки
                            first_lines = []
                            for _ in range(5):
                                line = f.readline().strip()
                                if line:
                                    first_lines.append(line)
                            logger.info(f"Первые строки в кодировке {encoding}: {first_lines}")
                            
                            # Если удалось прочитать строки, пробуем загрузить весь файл
                            if first_lines:
                                f.seek(0)  # Возвращаемся в начало файла
                                surnames = set()
                                line_count = 0
                                for line in f:
                                    line = line.strip()
                                    if line:
                                        surname_lower = line.lower()
                                        surnames.add(surname_lower)
                                        # Добавляем транслитерированный вариант фамилии
                                        self.translit_surnames.add(transliterate(surname_lower))
                                        line_count += 1
                                        if line_count <= 5:
                                            logger.debug(f"Загружена фамилия: {line} -> {transliterate(line)}")
                                
                                self.russian_surnames = surnames
                                logger.info(f"Успешно загружено {len(self.russian_surnames)} фамилий в кодировке {encoding}")
                                logger.info(f"Создано {len(self.translit_surnames)} транслитерированных вариантов фамилий")
                                
                                # Проверяем несколько тестовых фамилий
                                test_surnames = ['иванов', 'петров', 'сидоров', 'зингерман']
                                for surname in test_surnames:
                                    found = surname.lower() in self.russian_surnames
                                    translit = transliterate(surname.lower())
                                    translit_found = translit in self.translit_surnames
                                    logger.info(f"Тестовая проверка фамилии '{surname}':")
                                    logger.info(f"- Русский вариант: {'найден' if found else 'не найден'}")
                                    logger.info(f"- Транслит вариант '{translit}': {'найден' if translit_found else 'не найден'}")
                                
                                # Если успешно загрузили фамилии, прерываем цикл
                                if self.russian_surnames:
                                    break
                    except UnicodeDecodeError:
                        logger.warning(f"Не удалось прочитать файл в кодировке {encoding}")
                        continue
                    except Exception as e:
                        logger.error(f"Ошибка при чтении файла в кодировке {encoding}: {str(e)}")
                        continue
                
                if not self.russian_surnames:
                    logger.error("Не удалось загрузить фамилии ни в одной из кодировок")
            else:
                logger.error(f"Файл с фамилиями не найден: {surnames_path}")
        except Exception as e:
            logger.error(f"Ошибка при загрузке базы фамилий: {str(e)}")
            logger.exception("Полный стек ошибки:")

        # Список разрешенных слов (не для маскирования)
        # Расширенный список медицинских терминов, аббревиатур и единиц измерения
        self.allowed_words = {
            # Общие медицинские термины
            'медицина', 'здоровье', 'болезнь', 'симптом', 'диагноз', 'терапия', 'лечение', 'профилактика',
            'реабилитация', 'клиника', 'больница', 'отделение', 'пациент', 'врач', 'доктор', 'медсестра',
            'санитар', 'анализ', 'исследование', 'результат', 'норма', 'отклонение', 'повышен', 'понижен',
            'острый', 'хронический', 'доброкачественный', 'злокачественный', 'воспаление', 'инфекция',
            'травма', 'операция', 'процедура', 'консультация', 'рекомендация', 'анамнез', 'жалобы',
            'осмотр', 'пальпация', 'перкуссия', 'аускультация', 'эпикриз', 'выписка', 'направление',
            'карта', 'история', 'болезни', 'амбулаторная', 'стационарная', 'рентген', 'узи', 'кт', 'мрт',
            'экг', 'ээг', 'фгдс', 'фкс', 'биопсия', 'цитология', 'гистология', 'биохимия', 'гематология',
            'иммунология', 'серология', 'микробиология', 'вирусология', 'паразитология', 'генетика',
            'аллергология', 'анестезиология', 'кардиология', 'гастроэнтерология', 'гепатология',
            'гериатрия', 'гинекология', 'дерматология', 'инфекционные', 'болезни', 'кардиохирургия',
            'колопроктология', 'косметология', 'неврология', 'нейрохирургия', 'нефрология', 'онкология',
            'ортопедия', 'травматология', 'оториноларингология', 'офтальмология', 'педиатрия',
            'психиатрия', 'пульмонология', 'ревматология', 'сердечно-сосудистая', 'хирургия',
            'стоматология', 'терапия', 'торакальная', 'хирургия', 'урология', 'фтизиатрия',
            'эндокринология', 'эндоскопия', 'эпидемиология', 'лаборатория', 'аптека', 'медикамент',
            'препарат', 'доза', 'прием', 'курс', 'введение', 'инъекция', 'таблетка', 'капсула',
            'раствор', 'мазь', 'крем', 'гель', 'суппозитории', 'сироп', 'капли', 'спрей', 'ингаляция',
            'физиотерапия', 'массаж', 'лфк', 'диета', 'режим', 'покой', 'активность', 'реабилитолог',
            'психолог', 'психотерапевт', 'логопед', 'эрготерапевт', 'социальный', 'работник',
            'скорая', 'помощь', 'санавиация', 'госпитализация', 'выписка', 'перевод', 'наблюдение',
            'контроль', 'динамика', 'улучшение', 'ухудшение', 'без', 'изменений', 'осложнение',
            'прогноз', 'летальный', 'исход', 'причина', 'смерти', 'патологоанатомический', 'диагноз',
            'клинический', 'этиология', 'патогенез', 'морфология', 'функция', 'структура', 'орган',
            'система', 'ткань', 'клетка', 'молекула', 'ген', 'хромосома', 'мутация', 'наследственность',
            'врожденный', 'приобретенный', 'опухоль', 'метастаз', 'рецидив', 'ремиссия', 'стадия',
            'степень', 'класс', 'тип', 'форма', 'вариант', 'синдром', 'комплекс', 'феномен', 'рефлекс',
            'чувствительность', 'резистентность', 'толерантность', 'зависимость', 'абстиненция',
            'интоксикация', 'аллергия', 'анафилаксия', 'отек', 'гиперемия', 'ишемия', 'некроз',
            'атрофия', 'гипертрофия', 'гиперплазия', 'дисплазия', 'метаплазия', 'новообразование',
            'киста', 'абсцесс', 'флегмона', 'гангрена', 'язва', 'эрозия', 'рубец', 'спайка', 'грыжа',
            'свищ', 'стриктура', 'дивертикул', 'полип', 'камень', 'конкремент', 'тромб', 'эмбол',
            'аневризма', 'стеноз', 'облитерация', 'варикоз', 'геморрой', 'трещина', 'парапроктит',
            'сфинктер', 'недостаточность', 'гипертензия', 'гипотензия', 'тахикардия', 'брадикардия',
            'аритмия', 'экстрасистолия', 'фибрилляция', 'трепетание', 'блокада', 'инфаркт', 'инсульт',
            'стенокардия', 'кардиосклероз', 'миокардит', 'эндокардит', 'перикардит', 'сердечная',
            'недостаточность', 'дыхательная', 'недостаточность', 'пневмония', 'бронхит', 'астма',
            'эмфизема', 'плеврит', 'туберкулез', 'рак', 'легкого', 'хроническая', 'обструктивная',
            'болезнь', 'легких', 'хобл', 'гастрит', 'язва', 'желудка', 'двенадцатиперстной', 'кишки',
            'энтерит', 'колит', 'панкреатит', 'холецистит', 'желчнокаменная', 'болезнь', 'цирроз',
            'печени', 'гепатит', 'сахарный', 'диабет', 'тиреоидит', 'гипотиреоз', 'гипертиреоз',
            'акромегалия', 'болезнь', 'кушинга', 'аддисонова', 'болезнь', 'феохромоцитома', 'пролактинома',
            'несахарный', 'диабет', 'остеопороз', 'подагра', 'артрит', 'артроз', 'остеохондроз',
            'радикулит', 'неврит', 'невралгия', 'полинейропатия', 'мигрень', 'головная', 'боль',
            'головокружение', 'эпилепсия', 'паркинсонизм', 'рассеянный', 'склероз', 'боковой',
            'амиотрофический', 'склероз', 'инсомния', 'нарколепсия', 'сомнамбулизм', 'деменция',
            'альцгеймер', 'болезнь', 'паркинсона', 'психоз', 'невроз', 'депрессия', 'тревожное',
            'расстройство', 'шизофрения', 'биполярное', 'расстройство', 'фобия', 'паническая', 'атака',
            'обсессивно-компульсивное', 'расстройство', 'птср', 'анорексия', 'булимия', 'ожирение',
            'анемия', 'лейкопения', 'лейкоцитоз', 'тромбоцитопения', 'тромбоцитоз', 'коагулопатия',
            'лимфопения', 'лимфоцитоз', 'нейтропения', 'нейтрофилез', 'эозинофилия', 'базофилия',
            'моноцитоз', 'панцитопения', 'полицитемия', 'миелодиспластический', 'синдром',
            'миелопролиферативное', 'заболевание', 'лейкемия', 'лимфома', 'миелома',
            'гломерулонефрит', 'пиелонефрит', 'цистит', 'уретрит', 'почечная', 'недостаточность',
            'мочекаменная', 'болезнь', 'простатит', 'аденома', 'простаты', 'фимоз', 'парафимоз',
            'крипторхизм', 'варикоцеле', 'гидроцеле', 'эпидидимит', 'орхит', 'уремия',
            'гемодиализ', 'перитонеальный', 'диализ', 'трансплантация', 'почки', 'мочевого', 'пузыря',
            'мочеточника', 'уретры', 'предстательной', 'железы', 'яичка', 'придатка', 'полового', 'члена',
            'мошонки', 'влагалище', 'матка', 'трубы', 'яичники', 'шейка', 'матки', 'молочная', 'железа',
            'менструальный', 'цикл', 'беременность', 'роды', 'аборт', 'выкидыш', 'климакс', 'менопауза',
            'бесплодие', 'эко', 'икси', 'внутриматочная', 'инсеминация', 'контрацепция', 'половые',
            'инфекции', 'спид', 'вич', 'сифилис', 'гонорея', 'хламидиоз', 'трихомониаз', 'генитальный',
            'герпес', 'папилломавирусная', 'инфекция', 'рак', 'шейки', 'матки', 'рак', 'молочной', 'железы',
            'миома', 'матки', 'эндометриоз', 'киста', 'яичника', 'внематочная', 'беременность',
            'гестоз', 'преэклампсия', 'эклампсия', 'отслойка', 'плаценты', 'предлежание', 'плаценты',
            'кесарево', 'сечение', 'естественные', 'роды', 'эпизиотомия', 'перинеотомия', 'вакуум',
            'экстракция', 'акушерские', 'щипцы', 'плод', 'новорожденный', 'грудное', 'вскармливание',
            'искусственное', 'вскармливание', 'прикорм', 'детские', 'инфекции', 'корь', 'краснуха',
            'паротит', 'ветрянка', 'скарлатина', 'коклюш', 'дифтерия', 'столбняк', 'полиомиелит',
            'гемофильная', 'инфекция', 'пневмококковая', 'инфекция', 'менингококковая', 'инфекция',
            'ротавирусная', 'инфекция', 'вирусный', 'гепатит', 'а', 'б', 'с', 'грипп', 'орви', 'тонзиллит',
            'фарингит', 'ларингит', 'трахеит', 'бронхит', 'пневмония', 'отит', 'синусит', 'аденоиды',
            'гланды', 'кариес', 'пульпит', 'периодонтит', 'гингивит', 'пародонтит', 'стоматит', 'молочница',
            'кандидоз', 'глисты', 'аскаридоз', 'энтеробиоз', 'лямблиоз', 'токсоплазмоз', 'малярия',
            'клещевой', 'энцефалит', 'боррелиоз', 'лайма', 'вич', 'спид', 'сифилис', 'гонорея',
            'туберкулез', 'лепра', 'чума', 'холера', 'сибирская', 'язва', 'бешенство', 'столбняк',
            'ботулизм', 'сальмонеллез', 'дизентерия', 'эшерихиоз', 'кампилобактериоз', 'иерсиниоз',
            'листериоз', 'бруцеллез', 'туляремия', 'эризипелоид', 'лептоспироз', 'риккетсиозы',
            'сыпной', 'тиф', 'ку', 'лихорадка', 'эрлихиоз', 'анаплазмоз', 'бабезиоз', 'криптоспоридиоз',
            'изоспороз', 'циклоспороз', 'микроспоридиоз', 'пневмоцистоз', 'токсоплазмоз', 'лейшманиоз',
            'трипаносомоз', 'шистосомоз', 'филяриатоз', 'онхоцеркоз', 'лоаоз', 'дирофиляриоз',
            'дракункулез', 'клонорхоз', 'описторхоз', 'фасциолез', 'парагонимоз', 'дифиллоботриоз',
            'тениоз', 'цистицеркоз', 'эхинококкоз', 'альвеококкоз', 'гименолепидоз', 'дипилидиоз',
            'энтеробиоз', 'аскаридоз', 'трихоцефалез', 'анкилостомидоз', 'некатороз', 'стронгилоидоз',
            'трихинеллез', 'токсокароз', 'висцеральный', 'токсокароз', 'кожный', 'токсокароз',
            'ларва', 'мигранс', 'капилляроз', 'трихуроз', 'филяриоз', 'вухерериоз', 'бругиоз',
            'онхоцеркоз', 'лоаоз', 'мансонеллез', 'дирофиляриоз', 'дракункулез',
            # Единицы измерения (расширенный список)
            'мм', 'см', 'м', 'км', 'кг', 'г', 'мг', 'мкг', 'нг', 'пг', 'фг', 'мл', 'л', 'мкл', 'нл',
            'пл', 'ммоль', 'моль', 'мкмоль', 'нмоль', 'пмоль', 'ед', 'МЕ', 'мЕд', 'кЕд', 'МЕд',
            '%', 'промилле', 'г/л', 'мг/дл', 'мкмоль/л', 'ммоль/л', 'ед/л', 'МЕ/мл', 'г/дл',
            'пг/мл', 'фг', 'мкм', 'нм', 'Па', 'кПа', 'мм.рт.ст', 'сек', 'мин', 'час', 'сутки',
            'неделя', 'месяц', 'год', 'уд/мин', 'дых/мин', 'мм/ч', 'г/сут', 'мг/сут', 'мг/кг',
            'мкг/кг', 'мг%', 'мг/мл', 'мкг/мл', 'нг/мл', 'пг/мл', 'нмоль/л', 'мкмоль/л', 'ммоль/л',
            'моль/л', 'ед/л', 'МЕ/л', 'МЕ/мл', 'кЕд/л', 'мЕд/л', 'ОЕ', 'МНО', 'ПТИ', 'АЧТВ', 'фибриноген', 'тромбиновое', 'время',
            'д-димер', 'РФМК', 'протромбиновое', 'время', 'активность', 'протромбина',
            # Аббревиатуры (расширенный список из разных анализов)
            'ОАК', 'ОАМ', 'БАК', 'ЭКГ', 'УЗИ', 'МРТ', 'КТ', 'РЭГ', 'ЭЭГ', 'ФГДС', 'ФКС', 'ИФА',
            'ПЦР', 'СОЭ', 'ЛДГ', 'АЛТ', 'АСТ', 'ГГТ', 'ЩФ', 'ХС', 'ЛПНП', 'ЛПВП', 'ТГ', 'ГП',
            'СД', 'АД', 'ЧСС', 'ЧДД', 'SpO2', 'SaO2', 'FiO2', 'PaO2', 'PaCO2', 'pH', 'BE',
            'Hb', 'RBC', 'WBC', 'Plt', 'Hct', 'MCV', 'MCH', 'MCHC', 'RDW', 'RDW-SD', 'RDW-CV',
            'Pct', 'MPV', 'PDW', 'ESR', 'CRP', 'AST', 'ALT', 'GGT', 'ALP', 'TBIL', 'DBIL',
            'IBIL', 'TP', 'Alb', 'Glob', 'Urea', 'Crea', 'Glu', 'Chol', 'TG', 'HDL', 'LDL',
            'VLDL', 'CK', 'CK-MB', 'LDH', 'Amyl', 'Lipase', 'Na', 'K', 'Cl', 'Ca', 'P', 'Mg',
            'Fe', 'Ferr', 'TIBC', 'UIBC', 'Transferrin', 'CRP', 'Procalcitonin', 'Lactate',
            'CRP', 'ESR', 'RF', 'ASLO', 'ANA', 'ANCA', 'dsDNA', 'ENA', 'CCP', 'APLA',
            'Coags', 'PT', 'INR', 'aPTT', 'TT', 'Fibrinogen', 'D-dimer', 'FDP', 'ATIII', 'PC', 'PS',
            'UA', 'LE', 'RBC', 'WBC', 'Epi', 'Cyl', 'Crystals', 'Bacteria', 'Yeast', 'pH', 'SG', 'Prot',
            'Glu', 'Ket', 'Bil', 'Uro', 'Nit', 'LE', 'RBC', 'WBC', 'Epi', 'Cyl',
            'CSF', 'Prot', 'Glu', 'Cells', 'Cl', 'Lactate',
            'ECG', 'EEG', 'EMG', 'ENMG', 'EchoCG', 'US', 'CT', 'MRI', 'X-ray', 'PET-CT', 'SPECT',
            'FGDS', 'FCS', 'Colono', 'Broncho', 'Gastro', 'Laparos', 'Thoracos', 'Arthros',
            'ECMO', 'IVL', 'CPAP', 'BiPAP', 'NIV', 'HFNC', 'O2',
            'IV', 'IM', 'SC', 'PO', 'PR', 'PV', 'SL', 'TD', 'IH', 'NEB', 'ET', 'IO', 'IT',
            'CPR', 'AED', 'ACLS', 'BLS', 'PALS', 'NRP',
            'ICD-10', 'ICD-11', 'WHO', 'FDA', 'EMA', 'CDC', 'NIH', 'NICE', 'SIGN', 'UpToDate',
            'MedlinePlus', 'PubMed', 'eLibrary', 'CyberLeninka', 'Google Scholar', 'Web of Science',
            'Scopus', 'РИНЦ',
            # Термины с изображения
            'БИОХИМИЯ', 'Креатинин', 'Мочевина', 'Глюкоза', 'Аланинаминотрансфераза', '(АЛТ)',
            'Аспартатаминотрансфераза', '(АСТ)', 'Билирубин', 'общий', 'прямой', 'непрямой',
            'ОБЩИЙ', 'АНАЛИЗ', 'КРОВИ', 'Гемоглобин', 'Эритроциты', 'Гематокрит', 'Средний',
            'объем', 'эритроцитов', '(MCV)', 'Среднее', 'содержание', 'Нb', 'в', 'эритроците',
            '(МСН)', 'Средняя', 'концентрация', 'Нb', 'в', 'эритроцитах', '(MCHC)', 'RDW-SD',
            'RDW-CV', 'Тромбоциты', 'Фракция', 'незрелых', 'тромбоцитов', 'Средний', 'объем',
            'тромбоцитов', 'Ширина', 'распределения', 'тромбоцитов', 'по', 'объему', 'Тромбокрит',
            'Лейкоциты', 'Нейтрофилы', 'сегментоядерные', '%', 'Эозинофилы', 'Базофилы', 'Моноциты',
            'Лимфоциты',
             # Общие слова, которые могут встречаться в мед.документах
            'от', 'до', 'более', 'менее', 'равно', 'около', 'приблизительно', 'и', 'или', 'не',
            'без', 'с', 'по', 'на', 'в', 'из', 'под', 'над', 'перед', 'после', 'во', 'со', 'к',
            'у', 'через', 'для', 'за', 'между', 'среди', 'возле', 'около', 'вокруг', 'путем',
            'вследствие', 'благодаря', 'согласно', 'ввиду', 'вместо', 'помимо', 'кроме', 'спустя',
            'включая', 'исключая', 'путем', 'посредством', 'свыше', 'ниже', 'выше', 'внутри',
            'снаружи', 'слева', 'справа', 'спереди', 'сзади', 'верхний', 'нижний', 'правый',
            'левый', 'передний', 'задний', 'внутренний', 'наружный', 'центральный', 'периферический',
            'дистальный', 'проксимальный', 'медиальный', 'латеральный', 'поверхностный', 'глубокий',
            'основной', 'дополнительный', 'главный', 'побочный', 'системный', 'местный', 'общий',
            'частичный', 'полный', 'начальный', 'конечный', 'ранний', 'поздний', 'добрый', 'злой',
            'хороший', 'плохой', 'умеренный', 'выраженный', 'незначительный', 'сильный', 'слабый',
            'быстрый', 'медленный', 'высокий', 'низкий', 'большой', 'маленький', 'широкий', 'узкий',
            'длинный', 'короткий', 'круглый', 'овальный', 'треугольный', 'квадратный', 'прямой',
            'изогнутый', 'ровный', 'неровный', 'гладкий', 'шероховатый', 'мягкий', 'твердый',
            'эластичный', 'плотный', 'рыхлый', 'влажный', 'сухой', 'теплый', 'холодный', 'горячий',
            'прозрачный', 'мутный', 'светлый', 'темный', 'красный', 'белый', 'черный', 'серый',
            'желтый', 'зеленый', 'синий', 'фиолетовый', 'коричневый', 'розовый', 'оранжевый',
            'ясный', 'неясный', 'четкий', 'смазанный', 'яркий', 'тусклый', 'громкий', 'тихий',
            'резкий', 'тупой', 'острый', 'ноющий', 'тянущий', 'распирающий', 'сжимающий', 'колющий',
            'режущий', 'жгучий', 'пульсирующий', 'постоянный', 'периодический', 'утренний',
            'дневной', 'вечерний', 'ночной', 'единичный', 'множественный', 'диффузный', 'локальный',
            'ограниченный', 'распространенный', 'одиночный', 'парный', 'симметричный', 'асимметричный',
            'типичный', 'атипичный', 'характерный', 'нехарактерный', 'возможный', 'вероятный',
            'сомнительный', 'достоверный', 'предполагаемый', 'окончательный', 'предварительный',
            'повторный', 'первичный', 'вторичный', 'последующий', 'предыдущий', 'данный', 'имеющийся',
            'отсутствующий', 'присутствующий', 'выявлен', 'не', 'выявлен', 'обнаружен', 'не',
            'обнаружен', 'визуализируется', 'не', 'визуализируется', 'определяется', 'не',
            'определяется', 'сохранена', 'нарушена', 'усилена', 'ослаблена', 'увеличена',
            'уменьшена', 'уплотнена', 'размягчена', 'свободная', 'несвободная', 'напряженная',
            'расслаблена', 'отечна', 'не', 'отечна', 'гиперемирована', 'бледная', 'цианотична',
            'иктерична', 'субиктерична', 'нормальной', 'окраски', 'сухая', 'влажная', 'теплая',
            'холодная', 'чистая', 'грязная', 'повреждена', 'целая', 'интактная', 'признаки',
            'отсутствие', 'наличие', 'изменения', 'патология', 'физиология', 'анатомия',
            'гистология', 'цитология', 'биохимия', 'иммунология', 'генетика', 'микробиология',
            'вирусология', 'паразитология', 'фармакология', 'токсикология', 'эпидемиология',
            'статистика', 'методика', 'техника', 'аппарат', 'инструмент', 'оборудование',
            'реагент', 'расходный', 'материал', 'учет', 'регистрация', 'обработка', 'анализ',
            'интерпретация', 'заключение', 'рекомендация', 'назначение', 'выполнение', 'контроль',
            'качество', 'стандарт', 'протокол', 'алгоритм', 'схема', 'таблица', 'график',
            'изображение', 'фотография', 'скан', 'электронный', 'документ', 'бумажный', 'документ',
            'архив', 'база', 'данных', 'регистр', 'журнал', 'учета', 'отчет', 'справка', 'акт', 'протокол',
            'согласие', 'отказ', 'доверенность', 'направление', 'запись', 'рецепт', 'лист',
            'назначений', 'температурный', 'лист', 'лист', 'движения', 'пациента', 'история',
            'болезни', 'амбулаторная', 'карта', 'стационарная', 'карта', 'история', 'развития',
            'ребенка', 'прививочный', 'сертификат', 'паспорт', 'здоровья', 'санаторно-курортная',
            'карта', 'справка', 'для', 'гибдд', 'справка', 'для', 'бассейна', 'справка', 'форма',
            '086/у', 'справка', 'форма', '027/у', 'справка', 'форма', '057/у-04', 'выписка',
            'из', 'медицинской', 'карты', 'протокол', 'операции', 'протокол', 'патологоанатомического',
            'исследования', 'результаты', 'анализов', 'заключение', 'специалиста', 'консультативный',
            'лист', 'добровольное', 'информированное', 'согласие', 'на', 'медицинское',
            'вмешательство', 'отказ', 'от', 'медицинского', 'вмешательства', 'акт', 'медицинского',
            'освидетельствования', 'свидетельство', 'о', 'рождении', 'свидетельство', 'о', 'смерти',
            'листок', 'нетрудоспособности', 'больничный', 'лист', 'направление', 'на',
            'медико-социальную', 'экспертизу', 'ипр', 'индивидуальная', 'программа',
            'реабилитации', 'абилитации', 'пенсионное', 'удостоверение', 'паспорт', 'инвалида',
            'справка', 'мсек', 'справка', 'об', 'инвалидности', 'индивидуальный', 'номер',
            'страховой', 'счет', 'снилс', 'полис', 'обязательного', 'медицинского', 'страхования',
            'омс', 'полис', 'добровольного', 'медицинского', 'страхования', 'дмс', 'паспорт',
            'гражданина', 'удостоверение', 'личности', 'свидетельство', 'о', 'браке', 'свидетельство',
            'о', 'расторжении', 'брака', 'свидетельство', 'о', 'перемене', 'имени', 'свидетельство',
            'о', 'смерти', 'заявление', 'анкета', 'договор', 'соглашение', 'наряд', 'заказ',
            'счет', 'квитанция', 'чек', 'акт', 'приема-передачи', 'акт', 'выполненных', 'работ',
            'отчет', 'о', 'проделанной', 'работе', 'график', 'работы', 'расписание', 'приема',
            'журнал', 'учета', 'табель', 'учета', 'рабочего', 'времени', 'штатное', 'расписание',
            'должностная', 'инструкция', 'приказ', 'распоряжение', 'положение', 'правила',
            'инструкция', 'методические', 'рекомендации', 'клинические', 'рекомендации',
            'стандарт', 'медицинской', 'помощи', 'порядок', 'оказания', 'медицинской', 'помощи',
            'номенклатура', 'медицинских', 'услуг', 'санитарно-эпидемиологические', 'правила',
            'и', 'нормативы', 'санпин', 'гост', 'р', 'исо', 'мэк', 'ост', 'оум', 'ует',
            'воз', 'мкб-10', 'мкб-11', 'оквэд', 'окопф', 'октамо', 'оксо', 'окс', 'океи',
            'адрес', 'телефон', 'электронная', 'почта', 'сайт', 'организация', 'учреждение',
            'предприятие', 'общество', 'фонд', 'ассоциация', 'союз', 'федерация', 'министерство',
            'ведомство', 'служба', 'агентство', 'инспекция', 'комитет', 'комиссия', 'совет',
            'дума', 'правление', 'дирекция', 'администрация', 'руководитель', 'заведующий',
            'начальник', 'директор', 'главный', 'врач', 'заместитель', 'главного', 'врача',
            'старшая', 'медсестра', 'секретарь', 'бухгалтер', 'кассир', 'экономист', 'юрист',
            'инженер', 'программист', 'оператор', 'архивариус', 'кладовщик', 'водитель',
            'курьер', 'уборщица', 'охранник', 'паспортист', 'регистратор', 'администратор',
            'консультант', 'специалист', 'эксперт', 'аудитор', 'инспектор', 'контролер',
            'методист', 'статистик', 'аналитик', 'переводчик', 'редактор', 'корректор',
            'верстальщик', 'дизайнер', 'фотограф', 'видеооператор', 'звукорежиссер', 'осветитель',
            'гример', 'костюмер', 'декоратор', 'реквизитор', 'постановщик', 'сценарист',
            'режиссер', 'актер', 'певец', 'музыкант', 'танцор', 'художник', 'скульптор',
            'архитектор', 'строитель', 'рабочий', 'техник', 'лаборант', 'фармацевт', 'провизор',
            'программист', 'системный', 'администратор', 'сетевой', 'инженер', 'баз', 'данных',
            'веб-разработчик', 'мобильный', 'разработчик', 'тестировщик', 'дизайнер', 'интерфейсов',
            'аналитик', 'данных', 'специалист', 'по', 'искусственному', 'интеллекту', 'машинному',
            'обучению', 'робототехнике', 'кибербезопасности', 'информационной', 'безопасности',
            'управлению', 'проектами', 'управлению', 'персоналом', 'маркетингу', 'продажам',
            'логистике', 'закупкам', 'производству', 'контролю', 'качества', 'сертификации',
            'стандартизации', 'лицензированию', 'аккредитации', 'аттестации', 'образованию',
            'науке', 'исследованиям', 'разработке', 'инновациям', 'технологиям', 'информационным',
            'системам', 'телекоммуникациям', 'связи', 'энергетике', 'промышленности',
            'сельскому', 'хозяйству', 'транспорту', 'строительству', 'торговле', 'услугам',
            'финансам', 'юриспруденции', 'политике', 'социологии', 'психологии', 'философии',
            'истории', 'географии', 'литературе', 'искусству', 'культуре', 'спорту', 'туризму',
            'экологии', 'охране', 'окружающей', 'среды', 'безопасности', 'чрезвычайным', 'ситуациям',
            'гражданской', 'обороне', 'вооруженным', 'силам', 'правоохранительным', 'органам',
            'судебной', 'системе', 'прокуратуре', 'следственному', 'комитету', 'федеральной',
            'службе', 'безопасности', 'разведке', 'контрразведке', 'таможне', 'пограничной',
            'службе', 'миграционной', 'службе', 'налоговой', 'службе', 'казначейству', 'банку',
            'страховой', 'компании', 'пенсионному', 'фонду', 'фонду', 'социального', 'страхования',
            'фонду', 'обязательного', 'медицинского', 'страхования', 'фонду', 'капитального',
            'ремонта', 'управляющей', 'компании', 'тсж', 'жск', 'гск', 'снт', 'нт', 'ооо', 'ао',
            'пао', 'зао', 'нко', 'благотворительный', 'фонд', 'общественная', 'организация',
            'религиозная', 'организация', 'политическая', 'партия', 'профессиональный', 'союз',
            'сми', 'средства', 'массовой', 'информации', 'телевидение', 'радио', 'газета',
            'журнал', 'интернет', 'сайт', 'портал', 'блог', 'социальная', 'сеть', 'мессенджер',
            'электронная', 'почта', 'чат', 'форум', 'конференция', 'семинар', 'тренинг',
            'вебинар', 'лекция', 'практика', 'лабораторная', 'работа', 'контрольная', 'работа',
            'курсовая', 'работа', 'дипломная', 'работа', 'диссертация', 'статья', 'книга',
            'учебник', 'учебное', 'пособие', 'монография', 'сборник', 'трудов', 'тезисы',
            'докладов', 'рецензия', 'аннотация', 'реферат', 'обзор', 'словарь', 'справочник',
            'энциклопедия', 'атлас', 'карта', 'план', 'схема', 'чертеж', 'рисунок', 'фотография',
            'видеозапись', 'аудиозапись', 'презентация', 'доклад', 'сообщение', 'выступление',
            'дискуссия', 'обсуждение', 'спор', 'полемика', 'конфликт', 'критика', 'похвала',
            'благодарность', 'извинение', 'сожаление', 'сочувствие', 'сострадание', 'понимание',
            'доверие', 'уважение', 'любовь', 'ненависть', 'радость', 'грусть', 'страх', 'гнев',
            'удивление', 'восхищение', 'разочарование', 'надежда', 'отчаяние', 'терпение',
            'нетерпение', 'упорство', 'лень', 'трудолюбие', 'талант', 'гениальность', 'способность',
            'бездарность', 'ум', 'глупость', 'мудрость', 'наивность', 'хитрость', 'честность',
            'ложь', 'правда', 'справедливость', 'несправедливость', 'доброта', 'злость', 'щедрость',
            'жадность', 'смелость', 'трусость', 'решительность', 'нерешительность', 'уверенность',
            'неуверенность', 'оптимизм', 'пессимизм', 'энтузиазм', 'апатия', 'активность',
            'пассивность', 'инициатива', 'бездействие', 'ответственность', 'безответственность',
            'дисциплина', 'безалаберность', 'организованность', 'неорганизованность', 'пунктуальность',
            'опоздание', 'точность', 'неточность', 'внимательность', 'рассеянность', 'память',
            'забывчивость', 'внимание', 'отвлечение', 'мышление', 'логика', 'интуиция', 'творчество',
            'фантазия', 'воображение', 'реальность', 'иллюзия', 'мечта', 'цель', 'задача',
            'проблема', 'решение', 'успех', 'неудача', 'победа', 'поражение', 'достижение',
            'препятствие', 'возможность', 'трудность', 'риск', 'шанс', 'выбор', 'решение',
            'действие', 'бездействие', 'начало', 'конец', 'процесс', 'результат', 'причина',
            'следствие', 'условие', 'обстоятельство', 'фактор', 'влияние', 'взаимодействие',
            'связь', 'отношение', 'сходство', 'различие', 'аналогия', 'сравнение', 'противопоставление',
            'обобщение', 'детализация', 'классификация', 'систематизация', 'структура',
            'элемент', 'компонент', 'часть', 'целое', 'множество', 'единица', 'количество',
            'качество', 'свойство', 'признак', 'характеристика', 'параметр', 'показатель',
            'значение', 'величина', 'диапазон', 'предел', 'норматив', 'критерий', 'оценка',
            'измерение', 'расчет', 'анализ', 'синтез', 'моделирование', 'прогнозирование',
            'планирование', 'организация', 'контроль', 'регулирование', 'управление',
            'система', 'процесс', 'функция', 'механизм', 'принцип', 'основа', 'сущность',
            'явление', 'факт', 'событие', 'случай', 'пример', 'опыт', 'эксперимент', 'исследование',
            'наука', 'техника', 'технология', 'инновация', 'открытие', 'изобретение',
            'разработка', 'производство', 'продукция', 'услуга', 'потребность', 'спрос',
            'предложение', 'рынок', 'конкуренция', 'монополия', 'олигополия', 'экономика',
            'финансы', 'инвестиции', 'кредит', 'долг', 'прибыль', 'убыток', 'доход', 'расход',
            'бюджет', 'налог', 'пошлина', 'тариф', 'цена', 'стоимость', 'капитал', 'актив',
            'пассив', 'баланс', 'отчетность', 'аудит', 'контроль', 'риск', 'страхование',
            'обеспечение', 'гарантия', 'ответственность', 'право', 'закон', 'норма', 'правило',
            'документ', 'договор', 'соглашение', 'лицензия', 'сертификат', 'патент',
            'торговая', 'марка', 'товарный', 'знак', 'бренд', 'имидж', 'репутация', 'история',
            'география', 'политика', 'социология', 'психология', 'философия', 'религия',
            'культура', 'искусство', 'литература', 'музыка', 'театр', 'кино', 'фотография',
            'живопись', 'скульптура', 'архитектура', 'спорт', 'туризм', 'отдых',
            'развлечение', 'хобби', 'увлечение', 'интерес', 'знание', 'умение', 'навык',
            'опыт', 'образование', 'обучение', 'воспитание', 'развитие', 'личность',
            'характер', 'темперамент', 'эмоция', 'чувство', 'настроение', 'поведение',
            'общение', 'коммуникация', 'взаимодействие', 'отношения', 'конфликт',
            'сотрудничество', 'конкуренция', 'лидерство', 'подчинение', 'власть',
            'авторитет', 'влияние', 'убеждение', 'манипуляция', 'пропаганда',
            'информация', 'дезинформация', 'новость', 'факт', 'мнение', 'суждение',
            'умозаключение', 'логика', 'интуиция', 'рациональность', 'эмоциональность',
            'объективность', 'субъективность', 'истина', 'ложь', 'правда', 'вымысел',
            'реальность', 'фантазия', 'мечта', 'цель', 'смысл', 'жизнь', 'смерть',
            'рождение', 'старение', 'болезнь', 'выздоровление', 'инвалидность',
            'здоровье', 'благополучие', 'счастье', 'горе',
        }

        # Добавляем вариации слов (с разным регистром и знаками препинания)
        # Это уже было, но стоит убедиться, что применяется к новому большому списку
        lower_words = {word.lower() for word in self.allowed_words}
        upper_words = {word.upper() for word in self.allowed_words}
        capitalize_words = {word.capitalize() for word in self.allowed_words}
        self.allowed_words.update(lower_words)
        self.allowed_words.update(upper_words)
        self.allowed_words.update(capitalize_words)
        # Добавляем слова полностью в верхнем регистре, если они содержат дефис или спец.символы (типа RDW-SD)
        self.allowed_words.update({
             word for word in self.allowed_words if '-' in word or '(' in word or ')' in word or '%' in word or '*' in word
        })


        logger.info(f"Загружен список разрешенных слов: {len(self.allowed_words)} слов")

        # Инициализация компонентов Natasha - УДАЛЕНЫ

        # Паттерны для поиска персональных данных (кроме имен) - ВОЗМОЖНО НУЖНО ПЕРЕОСМЫСЛИТЬ ИХ ИСПОЛЬЗОВАНИЕ
        self.patterns = {
            'address': r'(?:Адрес пациента|Адрес)[:\s]+(.+?(?=\s*(?:Наименование исследования|$)))',
            'birth_date': r'(?:Дата рождения|Рождён)[:\s]+(\d{2}[/\.]\d{2}[/\.]\d{4}|\d{6,8})',
            'passport': r'(?:Паспорт|Серия и номер)[:\s]*(\d{4}\s?\d{6})',
            'oms': r'(?:Полис ОМС|Страховой полис)[:\s]*(\d{16})'
        }

        # Паттерны для медицинских данных (не для маскирования) - ДОБАВЛЕНЫ
        self.medical_patterns = {
            'birth_date': r'дата рождения:.*?(\d{2}\.\d{2}\.\d{4})',
            'gender': r'пол:.*?([мж])',
            # Добавлены паттерны для часто встречающихся медицинских данных
            'blood_group': r'(?:Группа крови|Гр\.крови)[:\s]*([\dIV]+(?:\s?[+\-])?)',
            'rh_factor': r'(?:Резус-фактор|Rh-фактор)[:\s]*([+\-])',
            'snils': r'(?:СНИЛС)[:\s]*(\d{3}-\d{3}-\d{3}\s?\d{2})',
            'oms_policy': r'(?:Полис ОМС)[:\s]*(\d{16})',
            'passport_details': r'(?:Паспорт|Серия и номер)[:\s]*(\d{4}\s?\d{6})',
            'phone_number': r'(?:Телефон|Тел)[:\s]*([\d\s\-\(\)\+]+)',
            'email': r'(?:Email)[:\s]*([\w\.\-]+@[\w\.\-]+)',
            'date': r'(\d{2}\.\d{2}\.\d{4})', # Общий паттерн даты
            'time': r'(\d{2}:\d{2})',       # Общий паттерн времени
            'datetime': r'(\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2})', # Паттерн дата+время
            # Паттерны для нестандартных единиц измерения
            'unit_x10_9_l': r'x10\*9/л',
            'unit_x10_12_l': r'x10\*12/л',
            'unit_e_l': r'Ед/л', # Пример, если Tesseract распознает ЕД как Ед
            'unit_me_ml': r'мЕ/мл' # Пример, если Tesseract распознает МЕ как мЕ
            # Добавьте другие нестандартные паттерны по мере необходимости
        }

        # Добавляем список исключений - слов, которые совпадают с фамилиями, но не должны маскироваться
        self.excluded_words = {
            'москва', 'врач', 'доктор', 'профессор', 'доцент', 'ассистент', 'заведующий',
            'главный', 'старший', 'младший', 'ведущий', 'научный', 'клинический',
            'лаборатория', 'отделение', 'центр', 'клиника', 'больница', 'поликлиника',
            'диспансер', 'санаторий', 'госпиталь', 'медицинский', 'научный', 'исследовательский',
            'институт', 'университет', 'академия', 'колледж', 'училище', 'школа'
        }

        # Добавляем список префиксов, после которых не должно быть маскирования
        self.excluded_prefixes = {
            'врач:', 'доктор:', 'профессор:', 'доцент:', 'ассистент:', 'заведующий:',
            'главный:', 'старший:', 'младший:', 'ведущий:', 'научный:', 'клинический:',
            'лаборатория:', 'отделение:', 'центр:', 'клиника:', 'больница:', 'поликлиника:',
            'диспансер:', 'санаторий:', 'госпиталь:', 'медицинский:', 'научный:', 'исследовательский:',
            'институт:', 'университет:', 'академия:', 'колледж:', 'училище:', 'школа:'
        }

        # Паттерны для числовых персональных данных
        self.numeric_patterns = {
            'oms': {
                'length': 16,  # Полис ОМС: 16 цифр
                'pattern': r'^\d{16}$',
                'description': 'Полис ОМС'
            },
            'snils': {
                'length': 11,  # СНИЛС: 11 цифр (без дефисов)
                'pattern': r'^\d{11}$',
                'description': 'СНИЛС'
            },
            'passport': {
                'length': 10,  # Паспорт: 10 цифр (серия + номер)
                'pattern': r'^\d{10}$',
                'description': 'Паспорт'
            },
            'birth_certificate': {
                'length': 11,  # Свидетельство о рождении: 11 цифр (римские цифры считаются как буквы)
                'pattern': r'^[IVXLC]+-\d{6}$',
                'description': 'Свидетельство о рождении'
            }
        }

        # Список длин числовых данных для проверки
        self.numeric_lengths = {pattern['length'] for pattern in self.numeric_patterns.values()}

    def _load_medical_terms(self):
        """
        Загружает базу медицинских терминов из файла или создает её при первом запуске
        """
        terms_file = Path('data/medical_terms.json')
        
        if not terms_file.exists():
            logger.info("База медицинских терминов не найдена. Начинаем загрузку...")
            try:
                # Создаем директорию если её нет
                terms_file.parent.mkdir(parents=True, exist_ok=True)
                
                # Загружаем термины из нескольких источников
                terms = set()
                
                # 1. Загружаем из Медицинского словаря
                try:
                    response = requests.get('https://medical-dictionary.thefreedictionary.com/')
                    if response.status_code == 200:
                        soup = BeautifulSoup(response.text, 'html.parser')
                        # Ищем все термины на странице (пример селектора, нужно уточнить)
                        for term in soup.select('.term-list a'):
                            terms.add(term.text.strip().lower())
                except Exception as e:
                    logger.error(f"Ошибка при загрузке терминов из Medical Dictionary: {str(e)}")

                # 2. Загружаем из Медицинской энциклопедии
                try:
                    response = requests.get('https://www.medical-enc.ru/')
                    if response.status_code == 200:
                        soup = BeautifulSoup(response.text, 'html.parser')
                        # Ищем все термины на странице (пример селектора, нужно уточнить)
                        for term in soup.select('.encyclopedia-list a'):
                            terms.add(term.text.strip().lower())
                except Exception as e:
                    logger.error(f"Ошибка при загрузке терминов из Медицинской энциклопедии: {str(e)}")

                # 3. Добавляем базовые медицинские термины
                basic_terms = {
                    # Анатомические термины
                    'голова', 'шея', 'грудь', 'спина', 'живот', 'таз', 'рука', 'нога',
                    'кисть', 'стопа', 'палец', 'глаз', 'ухо', 'нос', 'рот', 'зуб',
                    'язык', 'горло', 'пищевод', 'желудок', 'кишка', 'печень', 'почка',
                    'сердце', 'легкое', 'мозг', 'позвоночник', 'кость', 'мышца', 'связка',
                    'сустав', 'кровь', 'лимфа', 'нерв', 'сосуд', 'артерия', 'вена',
                    
                    # Медицинские процедуры
                    'осмотр', 'пальпация', 'перкуссия', 'аускультация', 'рентген',
                    'узи', 'кт', 'мрт', 'экг', 'эндоскопия', 'биопсия', 'операция',
                    'перевязка', 'инъекция', 'капельница', 'массаж', 'физиотерапия',
                    
                    # Симптомы и состояния
                    'боль', 'температура', 'кашель', 'насморк', 'тошнота', 'рвота',
                    'диарея', 'запор', 'головокружение', 'слабость', 'усталость',
                    'сонливость', 'бессонница', 'тревога', 'депрессия', 'стресс',
                    
                    # Диагнозы
                    'грипп', 'орви', 'пневмония', 'бронхит', 'гастрит', 'язва',
                    'гипертония', 'гипотония', 'диабет', 'артрит', 'артроз',
                    'остеохондроз', 'сколиоз', 'мигрень', 'инсульт', 'инфаркт',
                    
                    # Лекарства и препараты
                    'антибиотик', 'анальгетик', 'антисептик', 'витамин', 'гормон',
                    'иммуномодулятор', 'пробиотик', 'фермент', 'антигистамин',
                    
                    # Единицы измерения
                    'миллиметр', 'сантиметр', 'метр', 'миллилитр', 'литр',
                    'миллиграмм', 'грамм', 'килограмм', 'миллимоль', 'моль',
                    'миллиграмм-процент', 'миллиграмм-децилитр', 'миллиграмм-литр',
                    'микрограмм-литр', 'наномоль-литр', 'миллимоль-литр',
                    'единица-литр', 'международная-единица', 'миллиединица',
                    'килоединица', 'миллиединица-миллилитр', 'грамм-литр',
                    'пикограмм-миллилитр', 'фемтограмм', 'микрометр', 'нанометр',
                    'паскаль', 'килопаскаль', 'миллиметр-ртутного-столба',
                    'секунда', 'минута', 'час', 'сутки', 'неделя', 'месяц', 'год',
                    'удар-в-минуту', 'дыхание-в-минуту', 'миллиметр-в-час',
                    'грамм-в-сутки', 'миллиграмм-в-сутки', 'миллиграмм-на-килограмм',
                    'микрограмм-на-килограмм', 'миллиграмм-процент', 'миллиграмм-миллилитр',
                    'микрограмм-миллилитр', 'наномоль-литр', 'микромоль-литр',
                    'миллимоль-литр', 'моль-литр', 'единица-литр', 'международная-единица-литр',
                    'килоединица-литр', 'миллиединица-литр', 'относительная-единица',
                    'международное-нормализованное-отношение', 'протромбиновый-индекс',
                    'активированное-частичное-тромбопластиновое-время', 'фибриноген',
                    'тромбиновое-время', 'д-димер', 'растворимые-фибрин-мономерные-комплексы',
                    'протромбиновое-время', 'активность-протромбина',
                    
                    # Аббревиатуры
                    'оак', 'оам', 'бак', 'экг', 'узи', 'мрт', 'кт', 'рег', 'ээг',
                    'фгдс', 'фкс', 'ифа', 'пцр', 'соэ', 'лдг', 'алт', 'аст', 'ггт',
                    'щф', 'хс', 'лпнп', 'лпвп', 'тг', 'гп', 'сд', 'ад', 'чсс', 'чдд',
                    'spo2', 'sao2', 'fio2', 'pao2', 'paco2', 'ph', 'be', 'hb', 'rbc',
                    'wbc', 'plt', 'hct', 'mcv', 'mch', 'mchc', 'rdw', 'rdw-sd', 'rdw-cv',
                    'pct', 'mpv', 'pdw', 'esr', 'crp', 'ast', 'alt', 'ggt', 'alp', 'tbil',
                    'dbil', 'ibil', 'tp', 'alb', 'glob', 'urea', 'crea', 'glu', 'chol',
                    'tg', 'hdl', 'ldl', 'vldl', 'ck', 'ck-mb', 'ldh', 'amyl', 'lipase',
                    'na', 'k', 'cl', 'ca', 'p', 'mg', 'fe', 'ferr', 'tibc', 'uibc',
                    'transferrin', 'crp', 'procalcitonin', 'lactate', 'crp', 'esr', 'rf',
                    'aslo', 'ana', 'anca', 'dsdna', 'ena', 'ccp', 'apla', 'coags', 'pt',
                    'inr', 'aptt', 'tt', 'fibrinogen', 'd-dimer', 'fdp', 'atiii', 'pc',
                    'ps', 'ua', 'le', 'rbc', 'wbc', 'epi', 'cyl', 'crystals', 'bacteria',
                    'yeast', 'ph', 'sg', 'prot', 'glu', 'ket', 'bil', 'uro', 'nit', 'le',
                    'rbc', 'wbc', 'epi', 'cyl', 'csf', 'prot', 'glu', 'cells', 'cl',
                    'lactate', 'ecg', 'eeg', 'emg', 'enmg', 'echocg', 'us', 'ct', 'mri',
                    'x-ray', 'pet-ct', 'spect', 'fgds', 'fcs', 'colono', 'broncho',
                    'gastro', 'laparos', 'thoracos', 'arthros', 'ecmo', 'ivl', 'cpap',
                    'bipap', 'niv', 'hfnc', 'o2', 'iv', 'im', 'sc', 'po', 'pr', 'pv',
                    'sl', 'td', 'ih', 'neb', 'et', 'io', 'it', 'cpr', 'aed', 'acls',
                    'bls', 'pals', 'nrp', 'icd-10', 'icd-11', 'who', 'fda', 'ema', 'cdc',
                    'nih', 'nice', 'sign', 'uptodate', 'medlineplus', 'pubmed', 'elibrary',
                    'cyberleninka', 'google-scholar', 'web-of-science', 'scopus', 'ринц'
                }
                terms.update(basic_terms)

                # Сохраняем термины в файл
                with open(terms_file, 'w', encoding='utf-8') as f:
                    json.dump(list(terms), f, ensure_ascii=False, indent=2)
                
                logger.info(f"База медицинских терминов успешно создана: {len(terms)} терминов")
                
            except Exception as e:
                logger.error(f"Ошибка при создании базы медицинских терминов: {str(e)}")
                logger.exception("Полный стек ошибки:")
                return

        # Загружаем термины из файла
        try:
            with open(terms_file, 'r', encoding='utf-8') as f:
                self.medical_terms = set(json.load(f))
            logger.info(f"База медицинских терминов загружена: {len(self.medical_terms)} терминов")
        except Exception as e:
            logger.error(f"Ошибка при загрузке базы медицинских терминов: {str(e)}")
            logger.exception("Полный стек ошибки:")

    def _is_medical_term(self, word: str) -> bool:
        """
        Проверяет, является ли слово медицинским термином
        
        Args:
            word: проверяемое слово
            
        Returns:
            bool: является ли слово медицинским термином
        """
        return self.medical_terms.is_medical_term(word)

    def process_document(self, file_path: str, clinic_name: str, output_dir: str) -> Tuple[str, Dict]:
        """
        Обработка одного документа
        """
        # Генерируем уникальный ID документа и анализа
        document_id = str(uuid.uuid4())
        analysis_id = str(uuid.uuid4())

        # Загружаем изображение
        image, file_type = utils.load_image(file_path)
        if image is None:
            raise ValueError(f"Не удалось загрузить изображение: {file_path}")

        # Распознаем текст
        text_data = self._recognize_text(image)

        # Извлекаем данные
        extracted_data = self._extract_data(text_data)

        # Ищем фамилию и имя пациента в тексте
        patient_info = self._extract_patient_info(text_data)
        if patient_info and self.db is not None:
                try:
                    self.db.add_patient_analysis(
                        document_id=document_id,
                        surname=patient_info['surname'],
                        name=patient_info['name'],
                        analysis_id=analysis_id
                    )
                except Exception as e:
                    logger.error(f"Ошибка при сохранении связи пациента с анализом: {str(e)}")

        # Маскируем чувствительные данные
        masked_image = self._mask_sensitive_data(image, extracted_data['sensitive_regions'])

        # Сохраняем обработанное изображение
        output_filename = f"analysis_{analysis_id}.jpg"
        output_path = os.path.join(output_dir, output_filename)
        utils.save_image(masked_image, output_path)

        # Сохранение в базу данных
        if self.db is not None:
            self._save_to_database(
                document_id=document_id,
                original_filename=file_path,
                processed_filename=output_path,
                clinic_name=clinic_name,
                extracted_data=extracted_data
            )

        return output_path, extracted_data

    def _recognize_text(self, image: np.ndarray) -> List[Dict]:
        """
        Распознавание текста на изображении с поддержкой русского и английского языков
        """
        try:
            data = pytesseract.image_to_data(
                image, 
                lang='rus+eng',
                config='--psm 6',
                output_type=pytesseract.Output.DICT
            )

            if len([t for t in data['text'] if t.strip()]) < 5:
                eng_data = pytesseract.image_to_data(
                    image,
                    lang='eng',
                    config='--psm 6',
                    output_type=pytesseract.Output.DICT
                )
                
                if len([t for t in eng_data['text'] if t.strip()]) > len([t for t in data['text'] if t.strip()]):
                    data = eng_data

            words = []
            for i in range(len(data['text'])):
                if data['text'][i].strip():
                    confidence = float(data['conf'][i])
                    if confidence < 30:
                        continue

                    word = {
                        'text': data['text'][i],
                        'left': data['left'][i],
                        'top': data['top'][i],
                        'width': data['width'][i],
                        'height': data['height'][i],
                        'conf': confidence,
                        'lang': 'eng' if all(c.isascii() for c in data['text'][i]) else 'rus'
                    }
                    words.append(word)

            return words
        except Exception as e:
            logger.error(f"Ошибка при распознавании текста: {str(e)}")
            raise

    def _extract_data(self, text_data: List[Dict]) -> Dict:
        sensitive_regions = []
        found_surnames = []

        for i, word in enumerate(text_data):
            try:
                word_text = word['text'].strip()
                if not word_text:
                    continue

                # Проверяем числовые данные
                is_personal_data, data_type = self._is_numeric_personal_data(word_text)
                if is_personal_data:
                    sensitive_regions.append({
                        'text': word_text,
                        'confidence': word.get('conf', 0),
                        'left': word.get('left', 0),
                        'top': word.get('top', 0),
                        'width': word.get('width', 0),
                        'height': word.get('height', 0),
                        'type': data_type
                    })
                    logger.info(f"Найдены числовые персональные данные: {word_text} ({data_type})")
                    continue

                if not self._is_allowed_word(word_text, text_data, i):
                    found_surnames.append(word_text)
                    sensitive_regions.append({
                        'text': word_text,
                        'confidence': word.get('conf', 0),
                        'left': word.get('left', 0),
                        'top': word.get('top', 0),
                        'width': word.get('width', 0),
                        'height': word.get('height', 0),
                        'type': 'surname'
                    })
            except Exception as e:
                logger.error(f"Ошибка при обработке слова '{word.get('text', '')}': {str(e)}")
                continue

        # Извлекаем медицинские данные
        medical_data = []
        try:
            for pattern_name, pattern in self.medical_patterns.items():
                matches = re.finditer(pattern, ' '.join(word['text'] for word in text_data))
                for match in matches:
                    medical_data.append({
                        'type': pattern_name,
                        'value': match.group(1),
                        'text': match.group(0)
                    })
        except Exception as e:
            logger.error(f"Ошибка при извлечении медицинских данных: {str(e)}")
        
        return {
            'sensitive_regions': sensitive_regions,
            'medical_data': medical_data
        }

    def _mask_sensitive_data(self, image: np.ndarray, sensitive_regions: List[Dict]) -> np.ndarray:
        masked_image = image.copy()

        for region in sensitive_regions:
            try:
                left = int(region.get('left', 0))
                top = int(region.get('top', 0))
                width = int(region.get('width', 0))
                height = int(region.get('height', 0))
                
                if (left < 0 or top < 0 or width <= 0 or height <= 0 or
                    left + width > masked_image.shape[1] or
                    top + height > masked_image.shape[0]):
                    continue

                masked_image[top:top+height, left:left+width] = 0

            except Exception as e:
                logger.error(f"Ошибка при маскировании региона {region.get('text', '')}: {str(e)}")
                continue

        return masked_image

    def _analyze_context(self, text: str) -> List[Dict]:
        """
        Анализирует контекст текста с помощью обеих моделей Stanza.
        Определяет имена собственные в тексте как на русском, так и на английском.
        """
        if self.nlp_en is None or self.nlp_ru is None:
            logger.warning("Одна или обе модели Stanza не загружены")
            return []

        try:
            entities = []
            
            # Проверяем, есть ли в тексте русские буквы
            has_russian = any(c in text for c in 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя')
            
            # Анализируем оригинальный текст русской моделью, если есть русские буквы
            if has_russian:
                logger.info(f"Анализ русского текста: '{text}'")
                doc_ru = self.nlp_ru(text)
                for ent in doc_ru.ents:
                    if ent.type == "PERSON":
                        entity = {
                            'word': ent.text,
                            'entity_group': ent.type,
                            'score': 1.0,
                            'model': 'ru',
                            'start': ent.start_char,
                            'end': ent.end_char
                        }
                        entities.append(entity)
                        logger.info(f"Русская модель: найдена сущность: '{ent.text}' типа {ent.type} (позиция {ent.start_char}-{ent.end_char})")
            
            # Транслитерируем текст для английской модели
            text_translit = transliterate(text) if has_russian else text
            logger.info(f"Анализ транслитерированного текста: '{text_translit}'")
            doc_en = self.nlp_en(text_translit)
            
            for ent in doc_en.ents:
                if ent.type == "PERSON":
                    # Для транслитерированного текста ищем соответствие в оригинале
                    original_word = None
                    if has_russian:
                        # Ищем слово в оригинальном тексте, которое могло быть транслитерировано
                        for word in text.split():
                            if transliterate(word) == ent.text:
                                original_word = word
                                break
                    
                    entity = {
                        'word': original_word if original_word else ent.text,
                        'entity_group': ent.type,
                        'score': 1.0,
                        'model': 'en',
                        'start': ent.start_char,
                        'end': ent.end_char
                    }
                    entities.append(entity)
                    logger.info(f"Английская модель: найдена сущность: '{ent.text}' типа {ent.type} (позиция {ent.start_char}-{ent.end_char})")
            
            return entities
            
        except Exception as e:
            logger.error(f"Ошибка при анализе контекста: {str(e)}")
            logger.exception("Полный стек ошибки:")
            return []

    def _is_allowed_word(self, word: str, text_data: List[Dict], current_index: int) -> bool:
        if not word or len(word.strip()) < 2:
            logger.info(f"Слово '{word}' слишком короткое - пропускаем")
            return True

        # Проверяем числовые данные
        is_personal_data, data_type = self._is_numeric_personal_data(word)
        if is_personal_data:
            logger.info(f"Слово '{word}' определено как {data_type} - маскируем")
            return False

        # Проверяем, является ли слово медицинским термином
        if self._is_medical_term(word):
            logger.info(f"Слово '{word}' определено как медицинский термин - пропускаем")
            return True

        # Проверяем, начинается ли слово с заглавной буквы
        if not word[0].isupper():
            logger.info(f"Слово '{word}' начинается с маленькой буквы - пропускаем")
            return True

        letters_only = ''.join(c for c in word if c.isalpha())
        if not letters_only:
            logger.info(f"Слово '{word}' не содержит букв - пропускаем")
            return True

        word_lower = letters_only.lower()
        
        # Проверяем как русский вариант, так и транслитерированный
        is_surname = (word_lower in self.russian_surnames or 
                     word_lower in self.translit_surnames or
                     transliterate(word_lower) in self.translit_surnames)

        logger.info(f"Проверка слова '{word}' (нижний регистр: '{word_lower}'):")
        logger.info(f"- В списке русских фамилий: {word_lower in self.russian_surnames}")
        logger.info(f"- В списке транслитерированных фамилий: {word_lower in self.translit_surnames}")
        logger.info(f"- Транслитерация в списке: {transliterate(word_lower) in self.translit_surnames}")

        if not is_surname:
            logger.info(f"Слово '{word}' не похоже на фамилию - пропускаем")
            return True

        # Анализируем контекст слова
        start_idx = max(0, current_index - 5)
        end_idx = min(len(text_data), current_index + 6)
        context_words = [w['text'] for w in text_data[start_idx:end_idx]]
        context_text = ' '.join(context_words)
        
        logger.info(f"Проверка слова '{word}' в контексте: '{context_text}'")
        logger.info(f"Индекс слова в контексте: {current_index - start_idx}")
        logger.info(f"Слова в контексте: {context_words}")
        
        entities = self._analyze_context(context_text)
        
        # Считаем, сколько моделей определили слово как имя собственное
        models_identified = set()
        for entity in entities:
            if entity['word'] == word and entity['entity_group'] == "PERSON":
                models_identified.add(entity['model'])
                logger.info(f"Слово '{word}' определено как PERSON моделью {entity['model']}")
            elif entity['word'] == word:
                logger.info(f"Слово '{word}' определено как {entity['entity_group']} моделью {entity['model']}")

        # Проверяем, является ли слово частью полного имени
        is_part_of_full_name = False
        if len(context_words) >= 3:  # Если в контексте достаточно слов для полного имени
            # Ищем паттерн "Фамилия Имя Отчество"
            for i in range(len(context_words) - 2):
                if (context_words[i][0].isupper() and 
                    context_words[i+1][0].isupper() and 
                    context_words[i+2][0].isupper()):
                    is_part_of_full_name = True
                    logger.info(f"Найден паттерн полного имени: {' '.join(context_words[i:i+3])}")
                    break

        # Если обе модели определили слово как имя собственное - маскируем
        if len(models_identified) >= 2:
            logger.info(f"Слово '{word}' определено как PERSON обеими моделями - маскируем")
            return False
        
        # Если слово является частью полного имени - маскируем
        if is_part_of_full_name:
            logger.info(f"Слово '{word}' является частью полного имени - маскируем")
            return False
        
        # Если только одна модель определила как PERSON, проверяем контекст
        if len(models_identified) == 1:
            for entity in entities:
                if entity['word'] == word and entity['entity_group'] in ['PERSON', 'ORG']:
                    logger.info(f"Слово '{word}' определено как часть {entity['entity_group']} одной моделью")
                    return True

        logger.info(f"Слово '{word}' определено как фамилия (возможно в транслите)")
        return False

    def _save_to_database(self,
                         document_id: str,
                         original_filename: str,
                         processed_filename: str,
                         clinic_name: str,
                         extracted_data: Dict) -> None:
        """
        Сохранение данных в базу

        Args:
            document_id: ID документа
            original_filename: путь к оригинальному файлу
            processed_filename: путь к обработанному файлу
            clinic_name: название клиники
            extracted_data: извлеченные данные
        """
        if self.db is not None:
            self.db.save_document(
                document_id=document_id,
                original_filename=original_filename,
                processed_filename=processed_filename,
                clinic_name=clinic_name,
                extracted_data=extracted_data
            )

    def _extract_patient_info(self, text_data: List[Dict]) -> Optional[Dict]:
        """
        Извлекает информацию о пациенте из распознанного текста
        
        Args:
            text_data: список распознанных слов с координатами
            
        Returns:
            Optional[Dict]: словарь с информацией о пациенте или None, если информация не найдена
        """
        logger.info("Поиск информации о пациенте в тексте...")
        
        # Паттерны для поиска ФИО
        name_patterns = [
            r'(?:Пациент|ФИО|Ф\.И\.О\.|Фамилия)[:\s]+([А-ЯЁ][а-яё]+(?:\s+[А-ЯЁ][а-яё]+){0,2})',
            r'(?:Фамилия)[:\s]+([А-ЯЁ][а-яё]+)',
            r'(?:Имя)[:\s]+([А-ЯЁ][а-яё]+)'
        ]
        
        # Собираем весь текст в одну строку для поиска
        full_text = ' '.join(word['text'] for word in text_data)
        
        # Ищем фамилию и имя
        surname = None
        name = None
        
        for pattern in name_patterns:
            matches = re.finditer(pattern, full_text, re.IGNORECASE)
            for match in matches:
                text = match.group(1).strip()
                words = text.split()
                
                if len(words) >= 2:  # Если найдено полное ФИО
                    surname = words[0]
                    name = words[1]
                    break
                elif len(words) == 1:  # Если найдена только фамилия или имя
                    if 'фамилия' in match.group(0).lower():
                        surname = words[0]
                    elif 'имя' in match.group(0).lower():
                        name = words[0]
                
                if surname and name:
                    break
            
            if surname and name:
                break
        
        # Проверяем, что фамилия есть в базе данных
        if surname and surname.lower() in self.russian_surnames:
            logger.info(f"Найдена фамилия в базе данных: {surname}")
            if name:
                logger.info(f"Найдено имя: {name}")
                return {
                    'surname': surname,
                    'name': name
                }
        
        logger.warning("Не удалось найти достоверную информацию о пациенте")
        return None

    def _is_numeric_personal_data(self, text: str) -> Tuple[bool, str]:
        """
        Проверяет, является ли числовая строка персональными данными
        
        Args:
            text: строка для проверки
            
        Returns:
            Tuple[bool, str]: (является ли персональными данными, описание типа данных)
        """
        # Удаляем все нецифровые символы для проверки длины
        digits_only = ''.join(c for c in text if c.isdigit())
        
        # Проверяем длину
        if len(digits_only) not in self.numeric_lengths:
            return False, ""
            
        # Проверяем каждый паттерн
        for data_type, pattern_info in self.numeric_patterns.items():
            if re.match(pattern_info['pattern'], text):
                return True, pattern_info['description']
                
        # Если длина совпадает с длиной паспорта (10 цифр), считаем это паспортными данными
        if len(digits_only) == 10:
            return True, "Паспорт"
            
        return False, ""