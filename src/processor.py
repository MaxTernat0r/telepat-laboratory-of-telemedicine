import os
import re
from typing import Dict, List, Tuple, Optional
import cv2
import numpy as np
import pytesseract
from natasha import Doc, NewsNERTagger, NewsEmbedding
import logging
from .database import Database  # Добавляем импорт Database
import uuid # Добавляем импорт uuid
from src import utils # Изменяем относительный импорт на абсолютный

pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

logger = logging.getLogger(__name__)

class DocumentProcessor:
    """Класс для обработки медицинских документов"""

    def __init__(self, db: Optional[Database] = None):
        """
        Инициализация процессора

        Args:
            db: экземпляр базы данных (опционально)
        """
        self.db = db

        # Инициализация модели Natasha для NER
        logger.info("Загрузка модели Natasha для NER...")
        self.ner_tagger = NewsNERTagger(NewsEmbedding())
        logger.info("Модель Natasha успешно загружена.")

        # Загрузка базы русских фамилий
        logger.info("Загрузка базы русских фамилий...")
        self.russian_surnames = set()
        try:
            surnames_path = os.path.join(os.path.dirname(__file__), 'data', 'russian_surnames.txt')
            if os.path.exists(surnames_path):
                logger.info(f"Найден файл с фамилиями: {surnames_path}")
                file_size = os.path.getsize(surnames_path) / (1024 * 1024)  # размер в МБ
                logger.info(f"Размер файла: {file_size:.2f} МБ")
                
                with open(surnames_path, 'r', encoding='utf-8') as f:
                    # Читаем первые несколько строк для проверки формата
                    first_lines = [next(f).strip() for _ in range(5)]
                    logger.info(f"Примеры фамилий из файла: {first_lines}")
                    
                    # Возвращаемся в начало файла
                    f.seek(0)
                    
                    # Загружаем все фамилии
                    self.russian_surnames = {line.strip().lower() for line in f if line.strip()}
                    
                logger.info(f"Загружено {len(self.russian_surnames)} русских фамилий")
                logger.info(f"Примеры загруженных фамилий: {sorted(list(self.russian_surnames))[:5]}")
            else:
                logger.warning(f"Файл с фамилиями не найден: {surnames_path}")
        except Exception as e:
            logger.error(f"Ошибка при загрузке базы фамилий: {str(e)}")
            logger.exception("Полный стек ошибки:")

        # Список разрешенных слов (не для маскирования)
        # Расширенный список медицинских терминов, аббревиатур и единиц измерения
        self.allowed_words = {
            # Общие медицинские термины
            'медицина', 'здоровье', 'болезнь', 'симптом', 'диагноз', 'терапия', 'лечение', 'профилактика',
            'реабилитация', 'клиника', 'больница', 'отделение', 'пациент', 'врач', 'доктор', 'медсестра',
            'санитар', 'анализ', 'исследование', 'результат', 'норма', 'отклонение', 'повышен', 'понижен',
            'острый', 'хронический', 'доброкачественный', 'злокачественный', 'воспаление', 'инфекция',
            'травма', 'операция', 'процедура', 'консультация', 'рекомендация', 'анамнез', 'жалобы',
            'осмотр', 'пальпация', 'перкуссия', 'аускультация', 'эпикриз', 'выписка', 'направление',
            'карта', 'история', 'болезни', 'амбулаторная', 'стационарная', 'рентген', 'узи', 'кт', 'мрт',
            'экг', 'ээг', 'фгдс', 'фкс', 'биопсия', 'цитология', 'гистология', 'биохимия', 'гематология',
            'иммунология', 'серология', 'микробиология', 'вирусология', 'паразитология', 'генетика',
            'аллергология', 'анестезиология', 'кардиология', 'гастроэнтерология', 'гепатология',
            'гериатрия', 'гинекология', 'дерматология', 'инфекционные', 'болезни', 'кардиохирургия',
            'колопроктология', 'косметология', 'неврология', 'нейрохирургия', 'нефрология', 'онкология',
            'ортопедия', 'травматология', 'оториноларингология', 'офтальмология', 'педиатрия',
            'психиатрия', 'пульмонология', 'ревматология', 'сердечно-сосудистая', 'хирургия',
            'стоматология', 'терапия', 'торакальная', 'хирургия', 'урология', 'фтизиатрия',
            'эндокринология', 'эндоскопия', 'эпидемиология', 'лаборатория', 'аптека', 'медикамент',
            'препарат', 'доза', 'прием', 'курс', 'введение', 'инъекция', 'таблетка', 'капсула',
            'раствор', 'мазь', 'крем', 'гель', 'суппозитории', 'сироп', 'капли', 'спрей', 'ингаляция',
            'физиотерапия', 'массаж', 'лфк', 'диета', 'режим', 'покой', 'активность', 'реабилитолог',
            'психолог', 'психотерапевт', 'логопед', 'эрготерапевт', 'социальный', 'работник',
            'скорая', 'помощь', 'санавиация', 'госпитализация', 'выписка', 'перевод', 'наблюдение',
            'контроль', 'динамика', 'улучшение', 'ухудшение', 'без', 'изменений', 'осложнение',
            'прогноз', 'летальный', 'исход', 'причина', 'смерти', 'патологоанатомический', 'диагноз',
            'клинический', 'этиология', 'патогенез', 'морфология', 'функция', 'структура', 'орган',
            'система', 'ткань', 'клетка', 'молекула', 'ген', 'хромосома', 'мутация', 'наследственность',
            'врожденный', 'приобретенный', 'опухоль', 'метастаз', 'рецидив', 'ремиссия', 'стадия',
            'степень', 'класс', 'тип', 'форма', 'вариант', 'синдром', 'комплекс', 'феномен', 'рефлекс',
            'чувствительность', 'резистентность', 'толерантность', 'зависимость', 'абстиненция',
            'интоксикация', 'аллергия', 'анафилаксия', 'отек', 'гиперемия', 'ишемия', 'некроз',
            'атрофия', 'гипертрофия', 'гиперплазия', 'дисплазия', 'метаплазия', 'новообразование',
            'киста', 'абсцесс', 'флегмона', 'гангрена', 'язва', 'эрозия', 'рубец', 'спайка', 'грыжа',
            'свищ', 'стриктура', 'дивертикул', 'полип', 'камень', 'конкремент', 'тромб', 'эмбол',
            'аневризма', 'стеноз', 'облитерация', 'варикоз', 'геморрой', 'трещина', 'парапроктит',
            'сфинктер', 'недостаточность', 'гипертензия', 'гипотензия', 'тахикардия', 'брадикардия',
            'аритмия', 'экстрасистолия', 'фибрилляция', 'трепетание', 'блокада', 'инфаркт', 'инсульт',
            'стенокардия', 'кардиосклероз', 'миокардит', 'эндокардит', 'перикардит', 'сердечная',
            'недостаточность', 'дыхательная', 'недостаточность', 'пневмония', 'бронхит', 'астма',
            'эмфизема', 'плеврит', 'туберкулез', 'рак', 'легкого', 'хроническая', 'обструктивная',
            'болезнь', 'легких', 'хобл', 'гастрит', 'язва', 'желудка', 'двенадцатиперстной', 'кишки',
            'энтерит', 'колит', 'панкреатит', 'холецистит', 'желчнокаменная', 'болезнь', 'цирроз',
            'печени', 'гепатит', 'сахарный', 'диабет', 'тиреоидит', 'гипотиреоз', 'гипертиреоз',
            'акромегалия', 'болезнь', 'кушинга', 'аддисонова', 'болезнь', 'феохромоцитома', 'пролактинома',
            'несахарный', 'диабет', 'остеопороз', 'подагра', 'артрит', 'артроз', 'остеохондроз',
            'радикулит', 'неврит', 'невралгия', 'полинейропатия', 'мигрень', 'головная', 'боль',
            'головокружение', 'эпилепсия', 'паркинсонизм', 'рассеянный', 'склероз', 'боковой',
            'амиотрофический', 'склероз', 'инсомния', 'нарколепсия', 'сомнамбулизм', 'деменция',
            'альцгеймер', 'болезнь', 'паркинсона', 'психоз', 'невроз', 'депрессия', 'тревожное',
            'расстройство', 'шизофрения', 'биполярное', 'расстройство', 'фобия', 'паническая', 'атака',
            'обсессивно-компульсивное', 'расстройство', 'птср', 'анорексия', 'булимия', 'ожирение',
            'анемия', 'лейкопения', 'лейкоцитоз', 'тромбоцитопения', 'тромбоцитоз', 'коагулопатия',
            'лимфопения', 'лимфоцитоз', 'нейтропения', 'нейтрофилез', 'эозинофилия', 'базофилия',
            'моноцитоз', 'панцитопения', 'полицитемия', 'миелодиспластический', 'синдром',
            'миелопролиферативное', 'заболевание', 'лейкемия', 'лимфома', 'миелома',
            'гломерулонефрит', 'пиелонефрит', 'цистит', 'уретрит', 'почечная', 'недостаточность',
            'мочекаменная', 'болезнь', 'простатит', 'аденома', 'простаты', 'фимоз', 'парафимоз',
            'крипторхизм', 'варикоцеле', 'гидроцеле', 'эпидидимит', 'орхит', 'уремия',
            'гемодиализ', 'перитонеальный', 'диализ', 'трансплантация', 'почки', 'мочевого', 'пузыря',
            'мочеточника', 'уретры', 'предстательной', 'железы', 'яичка', 'придатка', 'полового', 'члена',
            'мошонки', 'влагалище', 'матка', 'трубы', 'яичники', 'шейка', 'матки', 'молочная', 'железа',
            'менструальный', 'цикл', 'беременность', 'роды', 'аборт', 'выкидыш', 'климакс', 'менопауза',
            'бесплодие', 'эко', 'икси', 'внутриматочная', 'инсеминация', 'контрацепция', 'половые',
            'инфекции', 'спид', 'вич', 'сифилис', 'гонорея', 'хламидиоз', 'трихомониаз', 'генитальный',
            'герпес', 'папилломавирусная', 'инфекция', 'рак', 'шейки', 'матки', 'рак', 'молочной', 'железы',
            'миома', 'матки', 'эндометриоз', 'киста', 'яичника', 'внематочная', 'беременность',
            'гестоз', 'преэклампсия', 'эклампсия', 'отслойка', 'плаценты', 'предлежание', 'плаценты',
            'кесарево', 'сечение', 'естественные', 'роды', 'эпизиотомия', 'перинеотомия', 'вакуум',
            'экстракция', 'акушерские', 'щипцы', 'плод', 'новорожденный', 'грудное', 'вскармливание',
            'искусственное', 'вскармливание', 'прикорм', 'детские', 'инфекции', 'корь', 'краснуха',
            'паротит', 'ветрянка', 'скарлатина', 'коклюш', 'дифтерия', 'столбняк', 'полиомиелит',
            'гемофильная', 'инфекция', 'пневмококковая', 'инфекция', 'менингококковая', 'инфекция',
            'ротавирусная', 'инфекция', 'вирусный', 'гепатит', 'а', 'б', 'с', 'грипп', 'орви', 'тонзиллит',
            'фарингит', 'ларингит', 'трахеит', 'бронхит', 'пневмония', 'отит', 'синусит', 'аденоиды',
            'гланды', 'кариес', 'пульпит', 'периодонтит', 'гингивит', 'пародонтит', 'стоматит', 'молочница',
            'кандидоз', 'глисты', 'аскаридоз', 'энтеробиоз', 'лямблиоз', 'токсоплазмоз', 'малярия',
            'клещевой', 'энцефалит', 'боррелиоз', 'лайма', 'вич', 'спид', 'сифилис', 'гонорея',
            'туберкулез', 'лепра', 'чума', 'холера', 'сибирская', 'язва', 'бешенство', 'столбняк',
            'ботулизм', 'сальмонеллез', 'дизентерия', 'эшерихиоз', 'кампилобактериоз', 'иерсиниоз',
            'листериоз', 'бруцеллез', 'туляремия', 'эризипелоид', 'лептоспироз', 'риккетсиозы',
            'сыпной', 'тиф', 'ку', 'лихорадка', 'эрлихиоз', 'анаплазмоз', 'бабезиоз', 'криптоспоридиоз',
            'изоспороз', 'циклоспороз', 'микроспоридиоз', 'пневмоцистоз', 'токсоплазмоз', 'лейшманиоз',
            'трипаносомоз', 'шистосомоз', 'филяриатоз', 'онхоцеркоз', 'лоаоз', 'дирофиляриоз',
            'дракункулез', 'клонорхоз', 'описторхоз', 'фасциолез', 'парагонимоз', 'дифиллоботриоз',
            'тениоз', 'цистицеркоз', 'эхинококкоз', 'альвеококкоз', 'гименолепидоз', 'дипилидиоз',
            'энтеробиоз', 'аскаридоз', 'трихоцефалез', 'анкилостомидоз', 'некатороз', 'стронгилоидоз',
            'трихинеллез', 'токсокароз', 'висцеральный', 'токсокароз', 'кожный', 'токсокароз',
            'ларва', 'мигранс', 'капилляроз', 'трихуроз', 'филяриоз', 'вухерериоз', 'бругиоз',
            'онхоцеркоз', 'лоаоз', 'мансонеллез', 'дирофиляриоз', 'дракункулез',
            # Единицы измерения (расширенный список)
            'мм', 'см', 'м', 'км', 'кг', 'г', 'мг', 'мкг', 'нг', 'пг', 'фг', 'мл', 'л', 'мкл', 'нл',
            'пл', 'ммоль', 'моль', 'мкмоль', 'нмоль', 'пмоль', 'ед', 'МЕ', 'мЕд', 'кЕд', 'МЕд',
            '%', 'промилле', 'г/л', 'мг/дл', 'мкмоль/л', 'ммоль/л', 'ед/л', 'МЕ/мл', 'г/дл',
            'пг/мл', 'фг', 'мкм', 'нм', 'Па', 'кПа', 'мм.рт.ст', 'сек', 'мин', 'час', 'сутки',
            'неделя', 'месяц', 'год', 'уд/мин', 'дых/мин', 'мм/ч', 'г/сут', 'мг/сут', 'мг/кг',
            'мкг/кг', 'мг%', 'мг/мл', 'мкг/мл', 'нг/мл', 'пг/мл', 'нмоль/л', 'мкмоль/л', 'ммоль/л',
            'моль/л', 'ед/л', 'МЕ/л', 'МЕ/мл', 'кЕд/л', 'мЕд/л', 'ОЕ', 'МНО', 'ПТИ', 'АЧТВ', 'фибриноген', 'тромбиновое', 'время',
            'д-димер', 'РФМК', 'протромбиновое', 'время', 'активность', 'протромбина',
            # Аббревиатуры (расширенный список из разных анализов)
            'ОАК', 'ОАМ', 'БАК', 'ЭКГ', 'УЗИ', 'МРТ', 'КТ', 'РЭГ', 'ЭЭГ', 'ФГДС', 'ФКС', 'ИФА',
            'ПЦР', 'СОЭ', 'ЛДГ', 'АЛТ', 'АСТ', 'ГГТ', 'ЩФ', 'ХС', 'ЛПНП', 'ЛПВП', 'ТГ', 'ГП',
            'СД', 'АД', 'ЧСС', 'ЧДД', 'SpO2', 'SaO2', 'FiO2', 'PaO2', 'PaCO2', 'pH', 'BE',
            'Hb', 'RBC', 'WBC', 'Plt', 'Hct', 'MCV', 'MCH', 'MCHC', 'RDW', 'RDW-SD', 'RDW-CV',
            'Pct', 'MPV', 'PDW', 'ESR', 'CRP', 'AST', 'ALT', 'GGT', 'ALP', 'TBIL', 'DBIL',
            'IBIL', 'TP', 'Alb', 'Glob', 'Urea', 'Crea', 'Glu', 'Chol', 'TG', 'HDL', 'LDL',
            'VLDL', 'CK', 'CK-MB', 'LDH', 'Amyl', 'Lipase', 'Na', 'K', 'Cl', 'Ca', 'P', 'Mg',
            'Fe', 'Ferr', 'TIBC', 'UIBC', 'Transferrin', 'CRP', 'Procalcitonin', 'Lactate',
            'CRP', 'ESR', 'RF', 'ASLO', 'ANA', 'ANCA', 'dsDNA', 'ENA', 'CCP', 'APLA',
            'Coags', 'PT', 'INR', 'aPTT', 'TT', 'Fibrinogen', 'D-dimer', 'FDP', 'ATIII', 'PC', 'PS',
            'UA', 'LE', 'RBC', 'WBC', 'Epi', 'Cyl', 'Crystals', 'Bacteria', 'Yeast', 'pH', 'SG', 'Prot',
            'Glu', 'Ket', 'Bil', 'Uro', 'Nit', 'LE', 'RBC', 'WBC', 'Epi', 'Cyl',
            'CSF', 'Prot', 'Glu', 'Cells', 'Cl', 'Lactate',
            'ECG', 'EEG', 'EMG', 'ENMG', 'EchoCG', 'US', 'CT', 'MRI', 'X-ray', 'PET-CT', 'SPECT',
            'FGDS', 'FCS', 'Colono', 'Broncho', 'Gastro', 'Laparos', 'Thoracos', 'Arthros',
            'ECMO', 'IVL', 'CPAP', 'BiPAP', 'NIV', 'HFNC', 'O2',
            'IV', 'IM', 'SC', 'PO', 'PR', 'PV', 'SL', 'TD', 'IH', 'NEB', 'ET', 'IO', 'IT',
            'CPR', 'AED', 'ACLS', 'BLS', 'PALS', 'NRP',
            'ICD-10', 'ICD-11', 'WHO', 'FDA', 'EMA', 'CDC', 'NIH', 'NICE', 'SIGN', 'UpToDate',
            'MedlinePlus', 'PubMed', 'eLibrary', 'CyberLeninka', 'Google Scholar', 'Web of Science',
            'Scopus', 'РИНЦ',
            # Термины с изображения
            'БИОХИМИЯ', 'Креатинин', 'Мочевина', 'Глюкоза', 'Аланинаминотрансфераза', '(АЛТ)',
            'Аспартатаминотрансфераза', '(АСТ)', 'Билирубин', 'общий', 'прямой', 'непрямой',
            'ОБЩИЙ', 'АНАЛИЗ', 'КРОВИ', 'Гемоглобин', 'Эритроциты', 'Гематокрит', 'Средний',
            'объем', 'эритроцитов', '(MCV)', 'Среднее', 'содержание', 'Нb', 'в', 'эритроците',
            '(МСН)', 'Средняя', 'концентрация', 'Нb', 'в', 'эритроцитах', '(MCHC)', 'RDW-SD',
            'RDW-CV', 'Тромбоциты', 'Фракция', 'незрелых', 'тромбоцитов', 'Средний', 'объем',
            'тромбоцитов', 'Ширина', 'распределения', 'тромбоцитов', 'по', 'объему', 'Тромбокрит',
            'Лейкоциты', 'Нейтрофилы', 'сегментоядерные', '%', 'Эозинофилы', 'Базофилы', 'Моноциты',
            'Лимфоциты',
             # Общие слова, которые могут встречаться в мед.документах
            'от', 'до', 'более', 'менее', 'равно', 'около', 'приблизительно', 'и', 'или', 'не',
            'без', 'с', 'по', 'на', 'в', 'из', 'под', 'над', 'перед', 'после', 'во', 'со', 'к',
            'у', 'через', 'для', 'за', 'между', 'среди', 'возле', 'около', 'вокруг', 'путем',
            'вследствие', 'благодаря', 'согласно', 'ввиду', 'вместо', 'помимо', 'кроме', 'спустя',
            'включая', 'исключая', 'путем', 'посредством', 'свыше', 'ниже', 'выше', 'внутри',
            'снаружи', 'слева', 'справа', 'спереди', 'сзади', 'верхний', 'нижний', 'правый',
            'левый', 'передний', 'задний', 'внутренний', 'наружный', 'центральный', 'периферический',
            'дистальный', 'проксимальный', 'медиальный', 'латеральный', 'поверхностный', 'глубокий',
            'основной', 'дополнительный', 'главный', 'побочный', 'системный', 'местный', 'общий',
            'частичный', 'полный', 'начальный', 'конечный', 'ранний', 'поздний', 'добрый', 'злой',
            'хороший', 'плохой', 'умеренный', 'выраженный', 'незначительный', 'сильный', 'слабый',
            'быстрый', 'медленный', 'высокий', 'низкий', 'большой', 'маленький', 'широкий', 'узкий',
            'длинный', 'короткий', 'круглый', 'овальный', 'треугольный', 'квадратный', 'прямой',
            'изогнутый', 'ровный', 'неровный', 'гладкий', 'шероховатый', 'мягкий', 'твердый',
            'эластичный', 'плотный', 'рыхлый', 'влажный', 'сухой', 'теплый', 'холодный', 'горячий',
            'прозрачный', 'мутный', 'светлый', 'темный', 'красный', 'белый', 'черный', 'серый',
            'желтый', 'зеленый', 'синий', 'фиолетовый', 'коричневый', 'розовый', 'оранжевый',
            'ясный', 'неясный', 'четкий', 'смазанный', 'яркий', 'тусклый', 'громкий', 'тихий',
            'резкий', 'тупой', 'острый', 'ноющий', 'тянущий', 'распирающий', 'сжимающий', 'колющий',
            'режущий', 'жгучий', 'пульсирующий', 'постоянный', 'периодический', 'утренний',
            'дневной', 'вечерний', 'ночной', 'единичный', 'множественный', 'диффузный', 'локальный',
            'ограниченный', 'распространенный', 'одиночный', 'парный', 'симметричный', 'асимметричный',
            'типичный', 'атипичный', 'характерный', 'нехарактерный', 'возможный', 'вероятный',
            'сомнительный', 'достоверный', 'предполагаемый', 'окончательный', 'предварительный',
            'повторный', 'первичный', 'вторичный', 'последующий', 'предыдущий', 'данный', 'имеющийся',
            'отсутствующий', 'присутствующий', 'выявлен', 'не', 'выявлен', 'обнаружен', 'не',
            'обнаружен', 'визуализируется', 'не', 'визуализируется', 'определяется', 'не',
            'определяется', 'сохранена', 'нарушена', 'усилена', 'ослаблена', 'увеличена',
            'уменьшена', 'уплотнена', 'размягчена', 'свободная', 'несвободная', 'напряженная',
            'расслаблена', 'отечна', 'не', 'отечна', 'гиперемирована', 'бледная', 'цианотична',
            'иктерична', 'субиктерична', 'нормальной', 'окраски', 'сухая', 'влажная', 'теплая',
            'холодная', 'чистая', 'грязная', 'повреждена', 'целая', 'интактная', 'признаки',
            'отсутствие', 'наличие', 'изменения', 'патология', 'физиология', 'анатомия',
            'гистология', 'цитология', 'биохимия', 'иммунология', 'генетика', 'микробиология',
            'вирусология', 'паразитология', 'фармакология', 'токсикология', 'эпидемиология',
            'статистика', 'методика', 'техника', 'аппарат', 'инструмент', 'оборудование',
            'реагент', 'расходный', 'материал', 'учет', 'регистрация', 'обработка', 'анализ',
            'интерпретация', 'заключение', 'рекомендация', 'назначение', 'выполнение', 'контроль',
            'качество', 'стандарт', 'протокол', 'алгоритм', 'схема', 'таблица', 'график',
            'изображение', 'фотография', 'скан', 'электронный', 'документ', 'бумажный', 'документ',
            'архив', 'база', 'данных', 'регистр', 'журнал', 'учета', 'отчет', 'справка', 'акт', 'протокол',
            'согласие', 'отказ', 'доверенность', 'направление', 'запись', 'рецепт', 'лист',
            'назначений', 'температурный', 'лист', 'лист', 'движения', 'пациента', 'история',
            'болезни', 'амбулаторная', 'карта', 'стационарная', 'карта', 'история', 'развития',
            'ребенка', 'прививочный', 'сертификат', 'паспорт', 'здоровья', 'санаторно-курортная',
            'карта', 'справка', 'для', 'гибдд', 'справка', 'для', 'бассейна', 'справка', 'форма',
            '086/у', 'справка', 'форма', '027/у', 'справка', 'форма', '057/у-04', 'выписка',
            'из', 'медицинской', 'карты', 'протокол', 'операции', 'протокол', 'патологоанатомического',
            'исследования', 'результаты', 'анализов', 'заключение', 'специалиста', 'консультативный',
            'лист', 'добровольное', 'информированное', 'согласие', 'на', 'медицинское',
            'вмешательство', 'отказ', 'от', 'медицинского', 'вмешательства', 'акт', 'медицинского',
            'освидетельствования', 'свидетельство', 'о', 'рождении', 'свидетельство', 'о', 'смерти',
            'листок', 'нетрудоспособности', 'больничный', 'лист', 'направление', 'на',
            'медико-социальную', 'экспертизу', 'ипр', 'индивидуальная', 'программа',
            'реабилитации', 'абилитации', 'пенсионное', 'удостоверение', 'паспорт', 'инвалида',
            'справка', 'мсек', 'справка', 'об', 'инвалидности', 'индивидуальный', 'номер',
            'страховой', 'счет', 'снилс', 'полис', 'обязательного', 'медицинского', 'страхования',
            'омс', 'полис', 'добровольного', 'медицинского', 'страхования', 'дмс', 'паспорт',
            'гражданина', 'удостоверение', 'личности', 'свидетельство', 'о', 'браке', 'свидетельство',
            'о', 'расторжении', 'брака', 'свидетельство', 'о', 'перемене', 'имени', 'свидетельство',
            'о', 'смерти', 'заявление', 'анкета', 'договор', 'соглашение', 'наряд', 'заказ',
            'счет', 'квитанция', 'чек', 'акт', 'приема-передачи', 'акт', 'выполненных', 'работ',
            'отчет', 'о', 'проделанной', 'работе', 'график', 'работы', 'расписание', 'приема',
            'журнал', 'учета', 'табель', 'учета', 'рабочего', 'времени', 'штатное', 'расписание',
            'должностная', 'инструкция', 'приказ', 'распоряжение', 'положение', 'правила',
            'инструкция', 'методические', 'рекомендации', 'клинические', 'рекомендации',
            'стандарт', 'медицинской', 'помощи', 'порядок', 'оказания', 'медицинской', 'помощи',
            'номенклатура', 'медицинских', 'услуг', 'санитарно-эпидемиологические', 'правила',
            'и', 'нормативы', 'санпин', 'гост', 'р', 'исо', 'мэк', 'ост', 'оум', 'ует',
            'воз', 'мкб-10', 'мкб-11', 'оквэд', 'окопф', 'октамо', 'оксо', 'окс', 'океи',
            'адрес', 'телефон', 'электронная', 'почта', 'сайт', 'организация', 'учреждение',
            'предприятие', 'общество', 'фонд', 'ассоциация', 'союз', 'федерация', 'министерство',
            'ведомство', 'служба', 'агентство', 'инспекция', 'комитет', 'комиссия', 'совет',
            'дума', 'правление', 'дирекция', 'администрация', 'руководитель', 'заведующий',
            'начальник', 'директор', 'главный', 'врач', 'заместитель', 'главного', 'врача',
            'старшая', 'медсестра', 'секретарь', 'бухгалтер', 'кассир', 'экономист', 'юрист',
            'инженер', 'программист', 'оператор', 'архивариус', 'кладовщик', 'водитель',
            'курьер', 'уборщица', 'охранник', 'паспортист', 'регистратор', 'администратор',
            'консультант', 'специалист', 'эксперт', 'аудитор', 'инспектор', 'контролер',
            'методист', 'статистик', 'аналитик', 'переводчик', 'редактор', 'корректор',
            'верстальщик', 'дизайнер', 'фотограф', 'видеооператор', 'звукорежиссер', 'осветитель',
            'гример', 'костюмер', 'декоратор', 'реквизитор', 'постановщик', 'сценарист',
            'режиссер', 'актер', 'певец', 'музыкант', 'танцор', 'художник', 'скульптор',
            'архитектор', 'строитель', 'рабочий', 'техник', 'лаборант', 'фармацевт', 'провизор',
            'программист', 'системный', 'администратор', 'сетевой', 'инженер', 'баз', 'данных',
            'веб-разработчик', 'мобильный', 'разработчик', 'тестировщик', 'дизайнер', 'интерфейсов',
            'аналитик', 'данных', 'специалист', 'по', 'искусственному', 'интеллекту', 'машинному',
            'обучению', 'робототехнике', 'кибербезопасности', 'информационной', 'безопасности',
            'управлению', 'проектами', 'управлению', 'персоналом', 'маркетингу', 'продажам',
            'логистике', 'закупкам', 'производству', 'контролю', 'качества', 'сертификации',
            'стандартизации', 'лицензированию', 'аккредитации', 'аттестации', 'образованию',
            'науке', 'исследованиям', 'разработке', 'инновациям', 'технологиям', 'информационным',
            'системам', 'телекоммуникациям', 'связи', 'энергетике', 'промышленности',
            'сельскому', 'хозяйству', 'транспорту', 'строительству', 'торговле', 'услугам',
            'финансам', 'юриспруденции', 'политике', 'социологии', 'психологии', 'философии',
            'истории', 'географии', 'литературе', 'искусству', 'культуре', 'спорту', 'туризму',
            'экологии', 'охране', 'окружающей', 'среды', 'безопасности', 'чрезвычайным', 'ситуациям',
            'гражданской', 'обороне', 'вооруженным', 'силам', 'правоохранительным', 'органам',
            'судебной', 'системе', 'прокуратуре', 'следственному', 'комитету', 'федеральной',
            'службе', 'безопасности', 'разведке', 'контрразведке', 'таможне', 'пограничной',
            'службе', 'миграционной', 'службе', 'налоговой', 'службе', 'казначейству', 'банку',
            'страховой', 'компании', 'пенсионному', 'фонду', 'фонду', 'социального', 'страхования',
            'фонду', 'обязательного', 'медицинского', 'страхования', 'фонду', 'капитального',
            'ремонта', 'управляющей', 'компании', 'тсж', 'жск', 'гск', 'снт', 'нт', 'ооо', 'ао',
            'пао', 'зао', 'нко', 'благотворительный', 'фонд', 'общественная', 'организация',
            'религиозная', 'организация', 'политическая', 'партия', 'профессиональный', 'союз',
            'сми', 'средства', 'массовой', 'информации', 'телевидение', 'радио', 'газета',
            'журнал', 'интернет', 'сайт', 'портал', 'блог', 'социальная', 'сеть', 'мессенджер',
            'электронная', 'почта', 'чат', 'форум', 'конференция', 'семинар', 'тренинг',
            'вебинар', 'лекция', 'практика', 'лабораторная', 'работа', 'контрольная', 'работа',
            'курсовая', 'работа', 'дипломная', 'работа', 'диссертация', 'статья', 'книга',
            'учебник', 'учебное', 'пособие', 'монография', 'сборник', 'трудов', 'тезисы',
            'докладов', 'рецензия', 'аннотация', 'реферат', 'обзор', 'словарь', 'справочник',
            'энциклопедия', 'атлас', 'карта', 'план', 'схема', 'чертеж', 'рисунок', 'фотография',
            'видеозапись', 'аудиозапись', 'презентация', 'доклад', 'сообщение', 'выступление',
            'дискуссия', 'обсуждение', 'спор', 'полемика', 'конфликт', 'критика', 'похвала',
            'благодарность', 'извинение', 'сожаление', 'сочувствие', 'сострадание', 'понимание',
            'доверие', 'уважение', 'любовь', 'ненависть', 'радость', 'грусть', 'страх', 'гнев',
            'удивление', 'восхищение', 'разочарование', 'надежда', 'отчаяние', 'терпение',
            'нетерпение', 'упорство', 'лень', 'трудолюбие', 'талант', 'гениальность', 'способность',
            'бездарность', 'ум', 'глупость', 'мудрость', 'наивность', 'хитрость', 'честность',
            'ложь', 'правда', 'справедливость', 'несправедливость', 'доброта', 'злость', 'щедрость',
            'жадность', 'смелость', 'трусость', 'решительность', 'нерешительность', 'уверенность',
            'неуверенность', 'оптимизм', 'пессимизм', 'энтузиазм', 'апатия', 'активность',
            'пассивность', 'инициатива', 'бездействие', 'ответственность', 'безответственность',
            'дисциплина', 'безалаберность', 'организованность', 'неорганизованность', 'пунктуальность',
            'опоздание', 'точность', 'неточность', 'внимательность', 'рассеянность', 'память',
            'забывчивость', 'внимание', 'отвлечение', 'мышление', 'логика', 'интуиция', 'творчество',
            'фантазия', 'воображение', 'реальность', 'иллюзия', 'мечта', 'цель', 'задача',
            'проблема', 'решение', 'успех', 'неудача', 'победа', 'поражение', 'достижение',
            'препятствие', 'возможность', 'трудность', 'риск', 'шанс', 'выбор', 'решение',
            'действие', 'бездействие', 'начало', 'конец', 'процесс', 'результат', 'причина',
            'следствие', 'условие', 'обстоятельство', 'фактор', 'влияние', 'взаимодействие',
            'связь', 'отношение', 'сходство', 'различие', 'аналогия', 'сравнение', 'противопоставление',
            'обобщение', 'детализация', 'классификация', 'систематизация', 'структура',
            'элемент', 'компонент', 'часть', 'целое', 'множество', 'единица', 'количество',
            'качество', 'свойство', 'признак', 'характеристика', 'параметр', 'показатель',
            'значение', 'величина', 'диапазон', 'предел', 'норматив', 'критерий', 'оценка',
            'измерение', 'расчет', 'анализ', 'синтез', 'моделирование', 'прогнозирование',
            'планирование', 'организация', 'контроль', 'регулирование', 'управление',
            'система', 'процесс', 'функция', 'механизм', 'принцип', 'основа', 'сущность',
            'явление', 'факт', 'событие', 'случай', 'пример', 'опыт', 'эксперимент', 'исследование',
            'наука', 'техника', 'технология', 'инновация', 'открытие', 'изобретение',
            'разработка', 'производство', 'продукция', 'услуга', 'потребность', 'спрос',
            'предложение', 'рынок', 'конкуренция', 'монополия', 'олигополия', 'экономика',
            'финансы', 'инвестиции', 'кредит', 'долг', 'прибыль', 'убыток', 'доход', 'расход',
            'бюджет', 'налог', 'пошлина', 'тариф', 'цена', 'стоимость', 'капитал', 'актив',
            'пассив', 'баланс', 'отчетность', 'аудит', 'контроль', 'риск', 'страхование',
            'обеспечение', 'гарантия', 'ответственность', 'право', 'закон', 'норма', 'правило',
            'документ', 'договор', 'соглашение', 'лицензия', 'сертификат', 'патент',
            'торговая', 'марка', 'товарный', 'знак', 'бренд', 'имидж', 'репутация', 'история',
            'география', 'политика', 'социология', 'психология', 'философия', 'религия',
            'культура', 'искусство', 'литература', 'музыка', 'театр', 'кино', 'фотография',
            'живопись', 'скульптура', 'архитектура', 'спорт', 'туризм', 'отдых',
            'развлечение', 'хобби', 'увлечение', 'интерес', 'знание', 'умение', 'навык',
            'опыт', 'образование', 'обучение', 'воспитание', 'развитие', 'личность',
            'характер', 'темперамент', 'эмоция', 'чувство', 'настроение', 'поведение',
            'общение', 'коммуникация', 'взаимодействие', 'отношения', 'конфликт',
            'сотрудничество', 'конкуренция', 'лидерство', 'подчинение', 'власть',
            'авторитет', 'влияние', 'убеждение', 'манипуляция', 'пропаганда',
            'информация', 'дезинформация', 'новость', 'факт', 'мнение', 'суждение',
            'умозаключение', 'логика', 'интуиция', 'рациональность', 'эмоциональность',
            'объективность', 'субъективность', 'истина', 'ложь', 'правда', 'вымысел',
            'реальность', 'фантазия', 'мечта', 'цель', 'смысл', 'жизнь', 'смерть',
            'рождение', 'старение', 'болезнь', 'выздоровление', 'инвалидность',
            'здоровье', 'благополучие', 'счастье', 'горе',
        }

        # Добавляем вариации слов (с разным регистром и знаками препинания)
        # Это уже было, но стоит убедиться, что применяется к новому большому списку
        lower_words = {word.lower() for word in self.allowed_words}
        upper_words = {word.upper() for word in self.allowed_words}
        capitalize_words = {word.capitalize() for word in self.allowed_words}
        self.allowed_words.update(lower_words)
        self.allowed_words.update(upper_words)
        self.allowed_words.update(capitalize_words)
        # Добавляем слова полностью в верхнем регистре, если они содержат дефис или спец.символы (типа RDW-SD)
        self.allowed_words.update({
             word for word in self.allowed_words if '-' in word or '(' in word or ')' in word or '%' in word or '*' in word
        })


        logger.info(f"Загружен список разрешенных слов: {len(self.allowed_words)} слов")

        # Инициализация компонентов Natasha - УДАЛЕНЫ

        # Паттерны для поиска персональных данных (кроме имен) - ВОЗМОЖНО НУЖНО ПЕРЕОСМЫСЛИТЬ ИХ ИСПОЛЬЗОВАНИЕ
        self.patterns = {
            'address': r'(?:Адрес пациента|Адрес)[:\s]+(.+?(?=\s*(?:Наименование исследования|$)))',
            'birth_date': r'(?:Дата рождения|Рождён)[:\s]+(\d{2}[/\.]\d{2}[/\.]\d{4}|\d{6,8})',
            'passport': r'(?:Паспорт|Серия и номер)[:\s]*(\d{4}\s?\d{6})',
            'oms': r'(?:Полис ОМС|Страховой полис)[:\s]*(\d{16})'
        }

        # Паттерны для медицинских данных (не для маскирования) - ДОБАВЛЕНЫ
        self.medical_patterns = {
            'birth_date': r'дата рождения:.*?(\d{2}\.\d{2}\.\d{4})',
            'gender': r'пол:.*?([мж])',
            # Добавлены паттерны для часто встречающихся медицинских данных
            'blood_group': r'(?:Группа крови|Гр\.крови)[:\s]*([\dIV]+(?:\s?[+\-])?)',
            'rh_factor': r'(?:Резус-фактор|Rh-фактор)[:\s]*([+\-])',
            'snils': r'(?:СНИЛС)[:\s]*(\d{3}-\d{3}-\d{3}\s?\d{2})',
            'oms_policy': r'(?:Полис ОМС)[:\s]*(\d{16})',
            'passport_details': r'(?:Паспорт|Серия и номер)[:\s]*(\d{4}\s?\d{6})',
            'phone_number': r'(?:Телефон|Тел)[:\s]*([\d\s\-\(\)\+]+)',
            'email': r'(?:Email)[:\s]*([\w\.\-]+@[\w\.\-]+)',
            'date': r'(\d{2}\.\d{2}\.\d{4})', # Общий паттерн даты
            'time': r'(\d{2}:\d{2})',       # Общий паттерн времени
            'datetime': r'(\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2})', # Паттерн дата+время
            # Паттерны для нестандартных единиц измерения
            'unit_x10_9_l': r'x10\*9/л',
            'unit_x10_12_l': r'x10\*12/л',
            'unit_e_l': r'Ед/л', # Пример, если Tesseract распознает ЕД как Ед
            'unit_me_ml': r'мЕ/мл' # Пример, если Tesseract распознает МЕ как мЕ
            # Добавьте другие нестандартные паттерны по мере необходимости
        }

    def process_document(self, file_path: str, clinic_name: str, output_dir: str) -> Tuple[str, Dict]:
        """
        Обработка одного документа
        """
        logger.info(f"Начало обработки документа: {file_path}")
        logger.info(f"Клиника: {clinic_name}")
        logger.info(f"Директория для сохранения: {output_dir}")

        # Генерируем уникальный ID документа
        document_id = str(uuid.uuid4())
        logger.info(f"Сгенерирован ID документа: {document_id}")

        # Загружаем изображение
        logger.info("Попытка загрузки изображения...")
        image, file_type = utils.load_image(file_path)
        if image is None:
            logger.error(f"Ошибка загрузки изображения: {file_path}")
            raise ValueError(f"Не удалось загрузить изображение: {file_path}")

        logger.info(f"Изображение успешно загружено. Тип: {file_type}, размер: {image.shape}")

        # Распознаем текст
        logger.info("Начало распознавания текста...")
        text_data = self._recognize_text(image)
        logger.info(f"Распознано {len(text_data)} слов")
        if text_data:
            logger.debug(f"Примеры распознанных слов: {text_data[:5]}")

        # Извлекаем данные
        logger.info("Начало извлечения данных...")
        extracted_data = self._extract_data(text_data)
        logger.info(f"Извлечено {len(extracted_data['sensitive_regions'])} чувствительных регионов")
        logger.info(f"Извлечено {len(extracted_data['medical_data'])} типов медицинских данных")

        # Маскируем чувствительные данные
        logger.info("Начало маскирования чувствительных данных...")
        masked_image = self._mask_sensitive_data(image, extracted_data['sensitive_regions'])
        logger.info("Маскирование завершено")

        # Сохраняем обработанное изображение
        output_filename = f"analysis_{document_id}.jpg"
        output_path = os.path.join(output_dir, output_filename)
        logger.info(f"Сохранение обработанного изображения: {output_path}")
        utils.save_image(masked_image, output_path)
        logger.info("Изображение успешно сохранено")

        # Сохранение в базу данных
        if self.db is not None:
            logger.info("Сохранение данных в базу...")
            self._save_to_database(
                document_id=document_id,
                original_filename=file_path,
                processed_filename=output_path,
                clinic_name=clinic_name,
                extracted_data=extracted_data
            )
            logger.info("Данные успешно сохранены в базу")
        else:
            logger.warning("База данных не инициализирована, сохранение в БД пропущено")

        logger.info(f"Обработка документа {file_path} завершена")
        return output_path, extracted_data

    def _recognize_text(self, image: np.ndarray) -> List[Dict]:
        """
        Распознавание текста на изображении с поддержкой русского и английского языков
        """
        logger.info("Начало распознавания текста через Tesseract...")
        try:
            # Сначала пробуем распознать с обоими языками
            data = pytesseract.image_to_data(
                image, 
                lang='rus+eng',  # Используем обе языковые модели
                config='--psm 6',  # Page segmentation mode: Assume a single uniform block of text
                output_type=pytesseract.Output.DICT
            )
            logger.info(f"Tesseract вернул {len(data['text'])} элементов (rus+eng)")

            # Если распознано мало слов, пробуем только английский
            if len([t for t in data['text'] if t.strip()]) < 5:
                logger.info("Мало слов распознано, пробуем только английский язык...")
                eng_data = pytesseract.image_to_data(
                    image,
                    lang='eng',
                    config='--psm 6',
                    output_type=pytesseract.Output.DICT
                )
                
                # Сравниваем результаты и берем лучшие
                if len([t for t in eng_data['text'] if t.strip()]) > len([t for t in data['text'] if t.strip()]):
                    logger.info("Английская модель показала лучший результат")
                    data = eng_data
                else:
                    logger.info("Комбинированная модель показала лучший результат")

            # Формируем список слов с координатами
            words = []
            for i in range(len(data['text'])):
                if data['text'][i].strip():
                    # Проверяем уверенность распознавания
                    confidence = float(data['conf'][i])
                    if confidence < 30:  # Пропускаем слова с низкой уверенностью
                        logger.debug(f"Пропущено слово с низкой уверенностью: '{data['text'][i]}' (conf={confidence})")
                        continue

                    word = {
                        'text': data['text'][i],
                        'left': data['left'][i],
                        'top': data['top'][i],
                        'width': data['width'][i],
                        'height': data['height'][i],
                        'conf': confidence,
                        'lang': 'eng' if all(c.isascii() for c in data['text'][i]) else 'rus'
                    }
                    words.append(word)
                    if i < 5:  # Логируем первые 5 слов для примера
                        logger.debug(f"Распознано слово: {word}")

            logger.info(f"Успешно распознано {len(words)} слов")
            if words:
                logger.debug(f"Примеры распознанных слов: {words[:5]}")
                # Статистика по языкам
                eng_words = len([w for w in words if w['lang'] == 'eng'])
                rus_words = len([w for w in words if w['lang'] == 'rus'])
                logger.info(f"Статистика по языкам: английских слов - {eng_words}, русских слов - {rus_words}")

            return words
        except Exception as e:
            logger.error(f"Ошибка при распознавании текста: {str(e)}")
            raise

    def _is_personal_data(self, word: str) -> bool:
        """
        Проверяет, является ли слово персональными данными с помощью Natasha
        """
        if not word or len(word.strip()) < 2:  # Пропускаем слишком короткие слова
            return False

        logger.debug(f"Проверка слова '{word}' на персональные данные через Natasha")
        try:
            doc = Doc(word)
            doc.segment()
            doc.tag_ner(self.ner_tagger)
            
            # Логируем все найденные сущности
            for span in doc.spans:
                logger.debug(f"Natasha определила сущность: тип={span.type}, текст={span.text}")
            
            is_personal = any(span.type in {"PER", "ORG", "LOC"} for span in doc.spans)
            logger.debug(f"Результат проверки слова '{word}': {'персональные данные' if is_personal else 'не персональные данные'}")
            return is_personal
        except Exception as e:
            logger.warning(f"Ошибка при проверке слова '{word}' через Natasha: {str(e)}")
            # При ошибке Natasha используем эвристическую проверку
            return self._heuristic_check_personal_data(word)

    def _heuristic_check_personal_data(self, word: str) -> bool:
        """
        Эвристическая проверка на персональные данные.
        Использует базу русских фамилий и проверяет только буквенные последовательности.
        """
        # Оставляем только буквы для проверки
        letters_only = ''.join(c for c in word if c.isalpha())
        if not letters_only:
            return False

        # Проверяем на русскую фамилию по базе данных
        if letters_only.lower() in self.russian_surnames:
            logger.debug(f"Слово '{word}' найдено в базе русских фамилий")
            return True

        # Паттерны для определения персональных данных (только буквенные последовательности)
        patterns = {
            'name': r'^[А-ЯЁ][а-яё]{1,20}(?:\s+[А-ЯЁ][а-яё]{1,20}){0,2}$',  # Имя/ФИО
            'eng_name': r'^[A-Z][a-z]+(?:\s+[A-Z][a-z]+){0,2}$',  # English name
            'address': r'^(?:ул|улица|пр|проспект|пер|переулок|д|дом|кв|квартира|street|avenue|road|lane|drive|way)$'  # Адрес (только ключевые слова)
        }

        # Проверяем каждый паттерн
        for pattern_name, pattern in patterns.items():
            if re.match(pattern, letters_only, re.IGNORECASE):
                logger.debug(f"Слово '{word}' определено как персональные данные по паттерну {pattern_name}")
                return True

        # Проверяем только английские окончания фамилий
        eng_surname_endings = ['son', 'ton', 'man', 'ford', 'wood', 'worth', 'field', 'ley']
        if all(c.isascii() for c in letters_only):  # Если это английское слово
            if any(letters_only.lower().endswith(ending) for ending in eng_surname_endings):
                if len(letters_only) > 3:  # Исключаем короткие слова
                    logger.debug(f"Слово '{word}' определено как возможная английская фамилия по окончанию")
                    return True

        return False

    def _is_allowed_word(self, word: str) -> bool:
        """
        Проверяет, является ли слово разрешенным.
        Теперь маскируются только буквенные последовательности и длинные числа.
        """
        if not word or len(word.strip()) < 2:  # Пропускаем слишком короткие слова
            return True

        logger.debug(f"Проверка слова: '{word}'")
        
        # Проверяем на длинное число (более 5 символов)
        if word.replace(',', '').replace('.', '').isdigit():
            if len(word.replace(',', '').replace('.', '')) > 5:
                logger.debug(f"Слово '{word}' является длинным числом (>5 символов) - будет замазано")
                return False
            logger.debug(f"Слово '{word}' является числом (≤5 символов) - разрешено")
            return True

        # Если слово содержит только не-буквенные символы - разрешаем
        if not any(c.isalpha() for c in word):
            logger.debug(f"Слово '{word}' не содержит букв - разрешено")
            return True

        # Проверяем медицинские паттерны
        for pattern_name, pattern in self.medical_patterns.items():
            if re.fullmatch(pattern, word, re.IGNORECASE):
                logger.debug(f"Слово '{word}' соответствует медицинскому паттерну '{pattern_name}' - разрешено")
                return True

        # Проверяем список разрешенных слов
        is_allowed = word in self.allowed_words
        logger.debug(f"Слово '{word}' {'найдено' if is_allowed else 'не найдено'} в списке разрешенных слов")
        
        if is_allowed:
            return True

        # Если слово не в списке разрешенных и содержит буквы, проверяем на персональные данные
        try:
            # Проверяем только буквенные части слова
            letters_only = ''.join(c for c in word if c.isalpha())
            if not letters_only:  # Если после удаления не-букв не осталось символов
                return True
                
            is_personal = self._is_personal_data(letters_only)
            logger.debug(f"Результат проверки на персональные данные: {'персональные данные' if is_personal else 'не персональные данные'}")
            return not is_personal
        except Exception as e:
            logger.error(f"Ошибка при проверке слова '{word}': {str(e)}")
            return True

    def _extract_data(self, text_data: List[Dict]) -> Dict:
        """
        Извлечение данных из распознанного текста
        """
        logger.info(f"Начало извлечения данных из {len(text_data)} слов")
        
        # Объединяем все слова в один текст
        full_text = ' '.join(word['text'] for word in text_data)
        
        # Ищем слова для маскирования
        sensitive_regions = []
        medical_data = {}

        # Проверяем каждое слово
        for word in text_data:
            try:
                word_text = word['text'].strip()
                if not word_text:  # Пропускаем пустые слова
                    continue

                # Проверяем на длинное число
                if word_text.replace(',', '').replace('.', '').isdigit():
                    if len(word_text.replace(',', '').replace('.', '')) > 5:
                        logger.info(f"Найдено длинное число '{word_text}' - будет замазано")
                        sensitive_regions.append({
                            'type': 'number',
                            'text': word_text,
                            'left': word['left'],
                            'top': word['top'],
                            'width': word['width'],
                            'height': word['height']
                        })
                    continue

                # Если слово не содержит букв - пропускаем
                if not any(c.isalpha() for c in word_text):
                    continue

                if not self._is_allowed_word(word_text):
                    logger.info(f"Слово '{word_text}' определено как чувствительное - будет замазано")
                    sensitive_regions.append({
                        'type': 'text',
                        'text': word_text,
                        'left': word['left'],
                        'top': word['top'],
                        'width': word['width'],
                        'height': word['height']
                    })
                else:
                    logger.debug(f"Слово '{word_text}' разрешено - не будет замазано")
            except Exception as e:
                logger.error(f"Ошибка при обработке слова '{word.get('text', '')}': {str(e)}")
                continue

        logger.info(f"Найдено {len(sensitive_regions)} чувствительных регионов для маскирования")
        
        # Поиск медицинских данных
        for data_type, pattern in self.medical_patterns.items():
            try:
                matches = re.finditer(pattern, full_text, re.IGNORECASE)
                for match in matches:
                    if data_type not in medical_data:
                        medical_data[data_type] = []
                    medical_data[data_type].append(match.group(0))
                    logger.debug(f"Найден медицинский паттерн '{data_type}': '{match.group(0)}'")
            except Exception as e:
                logger.error(f"Ошибка при поиске медицинского паттерна '{data_type}': {str(e)}")
                continue

        return {
            'sensitive_regions': sensitive_regions,
            'medical_data': medical_data
        }

    def _mask_sensitive_data(self, image: np.ndarray, sensitive_regions: List[Dict]) -> np.ndarray:
        """
        Маскирование чувствительных данных на изображении

        Args:
            image: исходное изображение
            sensitive_regions: список регионов для маскирования

        Returns:
            np.ndarray: изображение с замазанными данными
        """
        logger.info(f"Начало маскирования. Количество регионов: {len(sensitive_regions)}")

        # Создаем копию изображения
        masked_image = image.copy()

        # Маскируем каждый регион
        for region in sensitive_regions:
            try:
                # Получаем координаты региона
                left = int(region['left'])
                top = int(region['top'])
                width = int(region['width'])
                height = int(region['height'])

                # Проверяем валидность координат
                if (left < 0 or top < 0 or width <= 0 or height <= 0 or
                    left + width > masked_image.shape[1] or
                    top + height > masked_image.shape[0]):
                    logger.warning(f"Некорректные координаты региона: {region['text']}")
                    continue

                # Маскируем регион черным цветом (0)
                masked_image[top:top+height, left:left+width] = 0

                logger.info(f"Замазан регион: {region['text']} (x={left}, y={top}, w={width}, h={height})")

            except Exception as e:
                logger.error(f"Ошибка при маскировании региона {region['text']}: {str(e)}")
                continue

        logger.info("Маскирование завершено")
        return masked_image

    def _save_to_database(self,
                         document_id: str,
                         original_filename: str,
                         processed_filename: str,
                         clinic_name: str,
                         extracted_data: Dict) -> None:
        """
        Сохранение данных в базу

        Args:
            document_id: ID документа
            original_filename: путь к оригинальному файлу
            processed_filename: путь к обработанному файлу
            clinic_name: название клиники
            extracted_data: извлеченные данные
        """
        if self.db is not None:
            self.db.save_document(
                document_id=document_id,
                original_filename=original_filename,
                processed_filename=processed_filename,
                clinic_name=clinic_name,
                extracted_data=extracted_data
            )